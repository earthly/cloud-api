// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: billing.proto

package billing

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateSubscriptionLinkRequest_Type int32

const (
	CreateSubscriptionLinkRequest_PAYMENT_UNKNOWN              CreateSubscriptionLinkRequest_Type = 0
	CreateSubscriptionLinkRequest_PAYMENT_FREE_TIER_VALIDATION CreateSubscriptionLinkRequest_Type = 4
	CreateSubscriptionLinkRequest_PAYMENT_STARTER_SUBSCRIPTION CreateSubscriptionLinkRequest_Type = 5
	CreateSubscriptionLinkRequest_PAYMENT_PRO_SUBSCRIPTION     CreateSubscriptionLinkRequest_Type = 6
	CreateSubscriptionLinkRequest_PAYMENT_TEAM_SUBSCRIPTION    CreateSubscriptionLinkRequest_Type = 7
)

// Enum value maps for CreateSubscriptionLinkRequest_Type.
var (
	CreateSubscriptionLinkRequest_Type_name = map[int32]string{
		0: "PAYMENT_UNKNOWN",
		4: "PAYMENT_FREE_TIER_VALIDATION",
		5: "PAYMENT_STARTER_SUBSCRIPTION",
		6: "PAYMENT_PRO_SUBSCRIPTION",
		7: "PAYMENT_TEAM_SUBSCRIPTION",
	}
	CreateSubscriptionLinkRequest_Type_value = map[string]int32{
		"PAYMENT_UNKNOWN":              0,
		"PAYMENT_FREE_TIER_VALIDATION": 4,
		"PAYMENT_STARTER_SUBSCRIPTION": 5,
		"PAYMENT_PRO_SUBSCRIPTION":     6,
		"PAYMENT_TEAM_SUBSCRIPTION":    7,
	}
)

func (x CreateSubscriptionLinkRequest_Type) Enum() *CreateSubscriptionLinkRequest_Type {
	p := new(CreateSubscriptionLinkRequest_Type)
	*p = x
	return p
}

func (x CreateSubscriptionLinkRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateSubscriptionLinkRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_billing_proto_enumTypes[0].Descriptor()
}

func (CreateSubscriptionLinkRequest_Type) Type() protoreflect.EnumType {
	return &file_billing_proto_enumTypes[0]
}

func (x CreateSubscriptionLinkRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateSubscriptionLinkRequest_Type.Descriptor instead.
func (CreateSubscriptionLinkRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{0, 0}
}

type BillingPlan_PlanType int32

const (
	BillingPlan_PLAN_TYPE_UNKNOWN BillingPlan_PlanType = 0
	BillingPlan_PLAN_TYPE_FREE    BillingPlan_PlanType = 1
	BillingPlan_PLAN_TYPE_MONTHLY BillingPlan_PlanType = 2
	BillingPlan_PLAN_TYPE_YEARLY  BillingPlan_PlanType = 3
)

// Enum value maps for BillingPlan_PlanType.
var (
	BillingPlan_PlanType_name = map[int32]string{
		0: "PLAN_TYPE_UNKNOWN",
		1: "PLAN_TYPE_FREE",
		2: "PLAN_TYPE_MONTHLY",
		3: "PLAN_TYPE_YEARLY",
	}
	BillingPlan_PlanType_value = map[string]int32{
		"PLAN_TYPE_UNKNOWN": 0,
		"PLAN_TYPE_FREE":    1,
		"PLAN_TYPE_MONTHLY": 2,
		"PLAN_TYPE_YEARLY":  3,
	}
)

func (x BillingPlan_PlanType) Enum() *BillingPlan_PlanType {
	p := new(BillingPlan_PlanType)
	*p = x
	return p
}

func (x BillingPlan_PlanType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BillingPlan_PlanType) Descriptor() protoreflect.EnumDescriptor {
	return file_billing_proto_enumTypes[1].Descriptor()
}

func (BillingPlan_PlanType) Type() protoreflect.EnumType {
	return &file_billing_proto_enumTypes[1]
}

func (x BillingPlan_PlanType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BillingPlan_PlanType.Descriptor instead.
func (BillingPlan_PlanType) EnumDescriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{4, 0}
}

type BillingPlan_InstanceType int32

const (
	BillingPlan_INSTANCE_TYPE_UNKNOWN BillingPlan_InstanceType = 0
	BillingPlan_INSTANCE_TYPE_XSMALL  BillingPlan_InstanceType = 1
	BillingPlan_INSTANCE_TYPE_SMALL   BillingPlan_InstanceType = 2
	BillingPlan_INSTANCE_TYPE_MEDIUM  BillingPlan_InstanceType = 3
	BillingPlan_INSTANCE_TYPE_LARGE   BillingPlan_InstanceType = 4
	BillingPlan_INSTANCE_TYPE_XLARGE  BillingPlan_InstanceType = 5
	BillingPlan_INSTANCE_TYPE_2XLARGE BillingPlan_InstanceType = 6
	BillingPlan_INSTANCE_TYPE_3XLARGE BillingPlan_InstanceType = 7
	BillingPlan_INSTANCE_TYPE_4XLARGE BillingPlan_InstanceType = 8
)

// Enum value maps for BillingPlan_InstanceType.
var (
	BillingPlan_InstanceType_name = map[int32]string{
		0: "INSTANCE_TYPE_UNKNOWN",
		1: "INSTANCE_TYPE_XSMALL",
		2: "INSTANCE_TYPE_SMALL",
		3: "INSTANCE_TYPE_MEDIUM",
		4: "INSTANCE_TYPE_LARGE",
		5: "INSTANCE_TYPE_XLARGE",
		6: "INSTANCE_TYPE_2XLARGE",
		7: "INSTANCE_TYPE_3XLARGE",
		8: "INSTANCE_TYPE_4XLARGE",
	}
	BillingPlan_InstanceType_value = map[string]int32{
		"INSTANCE_TYPE_UNKNOWN": 0,
		"INSTANCE_TYPE_XSMALL":  1,
		"INSTANCE_TYPE_SMALL":   2,
		"INSTANCE_TYPE_MEDIUM":  3,
		"INSTANCE_TYPE_LARGE":   4,
		"INSTANCE_TYPE_XLARGE":  5,
		"INSTANCE_TYPE_2XLARGE": 6,
		"INSTANCE_TYPE_3XLARGE": 7,
		"INSTANCE_TYPE_4XLARGE": 8,
	}
)

func (x BillingPlan_InstanceType) Enum() *BillingPlan_InstanceType {
	p := new(BillingPlan_InstanceType)
	*p = x
	return p
}

func (x BillingPlan_InstanceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BillingPlan_InstanceType) Descriptor() protoreflect.EnumDescriptor {
	return file_billing_proto_enumTypes[2].Descriptor()
}

func (BillingPlan_InstanceType) Type() protoreflect.EnumType {
	return &file_billing_proto_enumTypes[2]
}

func (x BillingPlan_InstanceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BillingPlan_InstanceType.Descriptor instead.
func (BillingPlan_InstanceType) EnumDescriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{4, 1}
}

type BillingPlan_ArchType int32

const (
	BillingPlan_ARCH_TYPE_UNKNOWN BillingPlan_ArchType = 0
	BillingPlan_ARCH_TYPE_AMD64   BillingPlan_ArchType = 1
	BillingPlan_ARCH_TYPE_ARM64   BillingPlan_ArchType = 2
)

// Enum value maps for BillingPlan_ArchType.
var (
	BillingPlan_ArchType_name = map[int32]string{
		0: "ARCH_TYPE_UNKNOWN",
		1: "ARCH_TYPE_AMD64",
		2: "ARCH_TYPE_ARM64",
	}
	BillingPlan_ArchType_value = map[string]int32{
		"ARCH_TYPE_UNKNOWN": 0,
		"ARCH_TYPE_AMD64":   1,
		"ARCH_TYPE_ARM64":   2,
	}
)

func (x BillingPlan_ArchType) Enum() *BillingPlan_ArchType {
	p := new(BillingPlan_ArchType)
	*p = x
	return p
}

func (x BillingPlan_ArchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BillingPlan_ArchType) Descriptor() protoreflect.EnumDescriptor {
	return file_billing_proto_enumTypes[3].Descriptor()
}

func (BillingPlan_ArchType) Type() protoreflect.EnumType {
	return &file_billing_proto_enumTypes[3]
}

func (x BillingPlan_ArchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BillingPlan_ArchType.Descriptor instead.
func (BillingPlan_ArchType) EnumDescriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{4, 2}
}

// consider moving this to a common proto file
type BillingPlan_Tier int32

const (
	BillingPlan_TIER_UNKNOWN           BillingPlan_Tier = 0
	BillingPlan_TIER_SATELLITES        BillingPlan_Tier = 1
	BillingPlan_TIER_CI                BillingPlan_Tier = 2
	BillingPlan_TIER_LIMITED_FREE_TIER BillingPlan_Tier = 3
	BillingPlan_TIER_FREE_TIER         BillingPlan_Tier = 4
	BillingPlan_TIER_STARTER           BillingPlan_Tier = 5
	BillingPlan_TIER_PRO               BillingPlan_Tier = 6
	BillingPlan_TIER_TEAM              BillingPlan_Tier = 7
)

// Enum value maps for BillingPlan_Tier.
var (
	BillingPlan_Tier_name = map[int32]string{
		0: "TIER_UNKNOWN",
		1: "TIER_SATELLITES",
		2: "TIER_CI",
		3: "TIER_LIMITED_FREE_TIER",
		4: "TIER_FREE_TIER",
		5: "TIER_STARTER",
		6: "TIER_PRO",
		7: "TIER_TEAM",
	}
	BillingPlan_Tier_value = map[string]int32{
		"TIER_UNKNOWN":           0,
		"TIER_SATELLITES":        1,
		"TIER_CI":                2,
		"TIER_LIMITED_FREE_TIER": 3,
		"TIER_FREE_TIER":         4,
		"TIER_STARTER":           5,
		"TIER_PRO":               6,
		"TIER_TEAM":              7,
	}
)

func (x BillingPlan_Tier) Enum() *BillingPlan_Tier {
	p := new(BillingPlan_Tier)
	*p = x
	return p
}

func (x BillingPlan_Tier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BillingPlan_Tier) Descriptor() protoreflect.EnumDescriptor {
	return file_billing_proto_enumTypes[4].Descriptor()
}

func (BillingPlan_Tier) Type() protoreflect.EnumType {
	return &file_billing_proto_enumTypes[4]
}

func (x BillingPlan_Tier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BillingPlan_Tier.Descriptor instead.
func (BillingPlan_Tier) EnumDescriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{4, 3}
}

type CreateSubscriptionLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgName string                             `protobuf:"bytes,1,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	Type    CreateSubscriptionLinkRequest_Type `protobuf:"varint,2,opt,name=type,proto3,enum=api.public.billing.CreateSubscriptionLinkRequest_Type" json:"type,omitempty"`
	Monthly bool                               `protobuf:"varint,3,opt,name=monthly,proto3" json:"monthly,omitempty"`
}

func (x *CreateSubscriptionLinkRequest) Reset() {
	*x = CreateSubscriptionLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubscriptionLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubscriptionLinkRequest) ProtoMessage() {}

func (x *CreateSubscriptionLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubscriptionLinkRequest.ProtoReflect.Descriptor instead.
func (*CreateSubscriptionLinkRequest) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSubscriptionLinkRequest) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *CreateSubscriptionLinkRequest) GetType() CreateSubscriptionLinkRequest_Type {
	if x != nil {
		return x.Type
	}
	return CreateSubscriptionLinkRequest_PAYMENT_UNKNOWN
}

func (x *CreateSubscriptionLinkRequest) GetMonthly() bool {
	if x != nil {
		return x.Monthly
	}
	return false
}

type CreateSubscriptionLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *CreateSubscriptionLinkResponse) Reset() {
	*x = CreateSubscriptionLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubscriptionLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubscriptionLinkResponse) ProtoMessage() {}

func (x *CreateSubscriptionLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubscriptionLinkResponse.ProtoReflect.Descriptor instead.
func (*CreateSubscriptionLinkResponse) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSubscriptionLinkResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type GetBillingPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgName string `protobuf:"bytes,1,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
}

func (x *GetBillingPlanRequest) Reset() {
	*x = GetBillingPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBillingPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBillingPlanRequest) ProtoMessage() {}

func (x *GetBillingPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBillingPlanRequest.ProtoReflect.Descriptor instead.
func (*GetBillingPlanRequest) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{2}
}

func (x *GetBillingPlanRequest) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

type GetBillingPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plan                         *BillingPlan `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
	BillingCycleUsedBuildSeconds int32        `protobuf:"varint,2,opt,name=billing_cycle_used_build_seconds,json=billingCycleUsedBuildSeconds,proto3" json:"billing_cycle_used_build_seconds,omitempty"`
}

func (x *GetBillingPlanResponse) Reset() {
	*x = GetBillingPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBillingPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBillingPlanResponse) ProtoMessage() {}

func (x *GetBillingPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBillingPlanResponse.ProtoReflect.Descriptor instead.
func (*GetBillingPlanResponse) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{3}
}

func (x *GetBillingPlanResponse) GetPlan() *BillingPlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *GetBillingPlanResponse) GetBillingCycleUsedBuildSeconds() int32 {
	if x != nil {
		return x.BillingCycleUsedBuildSeconds
	}
	return 0
}

type BillingPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type BillingPlan_PlanType `protobuf:"varint,1,opt,name=type,proto3,enum=api.public.billing.BillingPlan_PlanType" json:"type,omitempty"`
	// Date the plan was started
	StartedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	MaxSatellites int32                  `protobuf:"varint,3,opt,name=max_satellites,json=maxSatellites,proto3" json:"max_satellites,omitempty"`
	// Max projects with pipelines (CI)
	MaxProjects int32 `protobuf:"varint,4,opt,name=max_projects,json=maxProjects,proto3" json:"max_projects,omitempty"`
	// Max pipelines per project (CI)
	MaxPipelines     int32                      `protobuf:"varint,5,opt,name=max_pipelines,json=maxPipelines,proto3" json:"max_pipelines,omitempty"`
	AllowedInstances []BillingPlan_InstanceType `protobuf:"varint,6,rep,packed,name=allowed_instances,json=allowedInstances,proto3,enum=api.public.billing.BillingPlan_InstanceType" json:"allowed_instances,omitempty"`
	AllowedArchs     []BillingPlan_ArchType     `protobuf:"varint,7,rep,packed,name=allowed_archs,json=allowedArchs,proto3,enum=api.public.billing.BillingPlan_ArchType" json:"allowed_archs,omitempty"`
	// Max total build time per month. 0 means no limit
	MaxBuildMinutes int32 `protobuf:"varint,8,opt,name=max_build_minutes,json=maxBuildMinutes,proto3" json:"max_build_minutes,omitempty"`
	// Max build duration. 0 means no limit
	MaxMinutesPerBuild int32 `protobuf:"varint,9,opt,name=max_minutes_per_build,json=maxMinutesPerBuild,proto3" json:"max_minutes_per_build,omitempty"`
	// Buildkit cache TTL. 0 means forever
	MaxHoursCacheRetention int32 `protobuf:"varint,10,opt,name=max_hours_cache_retention,json=maxHoursCacheRetention,proto3" json:"max_hours_cache_retention,omitempty"`
	// Tier type. Might include tier/products no longer available.
	Tier BillingPlan_Tier `protobuf:"varint,11,opt,name=tier,proto3,enum=api.public.billing.BillingPlan_Tier" json:"tier,omitempty"`
	// Free description associated to the tier
	TierDescription string `protobuf:"bytes,12,opt,name=tier_description,json=tierDescription,proto3" json:"tier_description,omitempty"`
	// Number of seats for current and subsequent tiers
	SeatsPerTier []int32 `protobuf:"varint,13,rep,packed,name=seats_per_tier,json=seatsPerTier,proto3" json:"seats_per_tier,omitempty"`
	// Monthly seat price per seat for the current and subsequent tiers
	PricePerSeat []int32 `protobuf:"varint,14,rep,packed,name=price_per_seat,json=pricePerSeat,proto3" json:"price_per_seat,omitempty"`
	// Monthly seat price per seat for the current and subsequent tiers (annually paid)
	PricePerSeatYear []int32 `protobuf:"varint,15,rep,packed,name=price_per_seat_year,json=pricePerSeatYear,proto3" json:"price_per_seat_year,omitempty"`
	// Number of monthly minutes included per seat for the current and subsequent tiers
	IncludedMinutesPerSeat []int32 `protobuf:"varint,16,rep,packed,name=included_minutes_per_seat,json=includedMinutesPerSeat,proto3" json:"included_minutes_per_seat,omitempty"`
	// Number of base minutes included per month for the current tier (in addition to the previous ones).
	IncludedMinutes int32 `protobuf:"varint,17,opt,name=included_minutes,json=includedMinutes,proto3" json:"included_minutes,omitempty"`
	// Users allowed to select runners Earthly version
	SelectableEarthlyVersion bool `protobuf:"varint,18,opt,name=selectable_earthly_version,json=selectableEarthlyVersion,proto3" json:"selectable_earthly_version,omitempty"`
	// Outgoing traffic coming from Satellites observed from static IP(s)
	StaticOriginatingIpAddress bool `protobuf:"varint,19,opt,name=static_originating_ip_address,json=staticOriginatingIpAddress,proto3" json:"static_originating_ip_address,omitempty"`
	// Default size to launch new instances when none is specified by the user
	DefaultInstanceType BillingPlan_InstanceType `protobuf:"varint,20,opt,name=default_instance_type,json=defaultInstanceType,proto3,enum=api.public.billing.BillingPlan_InstanceType" json:"default_instance_type,omitempty"`
	// Max seconds spent executing a single RUN (exec op)
	MaxSecondsPerExec int32 `protobuf:"varint,21,opt,name=max_seconds_per_exec,json=maxSecondsPerExec,proto3" json:"max_seconds_per_exec,omitempty"`
	// Whether this org can use SH satellites
	SelfHostedDisabled bool `protobuf:"varint,22,opt,name=self_hosted_disabled,json=selfHostedDisabled,proto3" json:"self_hosted_disabled,omitempty"`
	// Whether this org can use GHA-Satellites integration
	GhaDisabled bool `protobuf:"varint,23,opt,name=gha_disabled,json=ghaDisabled,proto3" json:"gha_disabled,omitempty"`
}

func (x *BillingPlan) Reset() {
	*x = BillingPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_billing_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillingPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillingPlan) ProtoMessage() {}

func (x *BillingPlan) ProtoReflect() protoreflect.Message {
	mi := &file_billing_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillingPlan.ProtoReflect.Descriptor instead.
func (*BillingPlan) Descriptor() ([]byte, []int) {
	return file_billing_proto_rawDescGZIP(), []int{4}
}

func (x *BillingPlan) GetType() BillingPlan_PlanType {
	if x != nil {
		return x.Type
	}
	return BillingPlan_PLAN_TYPE_UNKNOWN
}

func (x *BillingPlan) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *BillingPlan) GetMaxSatellites() int32 {
	if x != nil {
		return x.MaxSatellites
	}
	return 0
}

func (x *BillingPlan) GetMaxProjects() int32 {
	if x != nil {
		return x.MaxProjects
	}
	return 0
}

func (x *BillingPlan) GetMaxPipelines() int32 {
	if x != nil {
		return x.MaxPipelines
	}
	return 0
}

func (x *BillingPlan) GetAllowedInstances() []BillingPlan_InstanceType {
	if x != nil {
		return x.AllowedInstances
	}
	return nil
}

func (x *BillingPlan) GetAllowedArchs() []BillingPlan_ArchType {
	if x != nil {
		return x.AllowedArchs
	}
	return nil
}

func (x *BillingPlan) GetMaxBuildMinutes() int32 {
	if x != nil {
		return x.MaxBuildMinutes
	}
	return 0
}

func (x *BillingPlan) GetMaxMinutesPerBuild() int32 {
	if x != nil {
		return x.MaxMinutesPerBuild
	}
	return 0
}

func (x *BillingPlan) GetMaxHoursCacheRetention() int32 {
	if x != nil {
		return x.MaxHoursCacheRetention
	}
	return 0
}

func (x *BillingPlan) GetTier() BillingPlan_Tier {
	if x != nil {
		return x.Tier
	}
	return BillingPlan_TIER_UNKNOWN
}

func (x *BillingPlan) GetTierDescription() string {
	if x != nil {
		return x.TierDescription
	}
	return ""
}

func (x *BillingPlan) GetSeatsPerTier() []int32 {
	if x != nil {
		return x.SeatsPerTier
	}
	return nil
}

func (x *BillingPlan) GetPricePerSeat() []int32 {
	if x != nil {
		return x.PricePerSeat
	}
	return nil
}

func (x *BillingPlan) GetPricePerSeatYear() []int32 {
	if x != nil {
		return x.PricePerSeatYear
	}
	return nil
}

func (x *BillingPlan) GetIncludedMinutesPerSeat() []int32 {
	if x != nil {
		return x.IncludedMinutesPerSeat
	}
	return nil
}

func (x *BillingPlan) GetIncludedMinutes() int32 {
	if x != nil {
		return x.IncludedMinutes
	}
	return 0
}

func (x *BillingPlan) GetSelectableEarthlyVersion() bool {
	if x != nil {
		return x.SelectableEarthlyVersion
	}
	return false
}

func (x *BillingPlan) GetStaticOriginatingIpAddress() bool {
	if x != nil {
		return x.StaticOriginatingIpAddress
	}
	return false
}

func (x *BillingPlan) GetDefaultInstanceType() BillingPlan_InstanceType {
	if x != nil {
		return x.DefaultInstanceType
	}
	return BillingPlan_INSTANCE_TYPE_UNKNOWN
}

func (x *BillingPlan) GetMaxSecondsPerExec() int32 {
	if x != nil {
		return x.MaxSecondsPerExec
	}
	return 0
}

func (x *BillingPlan) GetSelfHostedDisabled() bool {
	if x != nil {
		return x.SelfHostedDisabled
	}
	return false
}

func (x *BillingPlan) GetGhaDisabled() bool {
	if x != nil {
		return x.GhaDisabled
	}
	return false
}

var File_billing_proto protoreflect.FileDescriptor

var file_billing_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xbf, 0x02, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x4a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x22, 0x9c, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46,
	0x52, 0x45, 0x45, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x07, 0x22, 0x32, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x32, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x95, 0x01, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x46, 0x0a, 0x20,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43,
	0x79, 0x63, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0xb2, 0x0e, 0x0a, 0x0b, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x50, 0x6c, 0x61, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50,
	0x6c, 0x61, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c,
	0x69, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x6d, 0x61, 0x78, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x2e,
	0x41, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x2e,
	0x54, 0x69, 0x65, 0x72, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x69,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x69, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x74, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x73,
	0x65, 0x61, 0x74, 0x73, 0x50, 0x65, 0x72, 0x54, 0x69, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x53, 0x65, 0x61,
	0x74, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x61, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74, 0x59, 0x65, 0x61, 0x72,
	0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x61, 0x72, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x61, 0x72, 0x74, 0x68, 0x6c, 0x79, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x60, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x50, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65,
	0x6c, 0x66, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x65, 0x6c, 0x66, 0x48, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x67, 0x68, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x67, 0x68, 0x61, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0x62, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x50,
	0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x4c,
	0x59, 0x10, 0x03, 0x22, 0xfa, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x18, 0x0a, 0x14, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x58, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c,
	0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41,
	0x52, 0x47, 0x45, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x58, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x05, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x32, 0x58, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x33, 0x58, 0x4c, 0x41,
	0x52, 0x47, 0x45, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x34, 0x58, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x08,
	0x22, 0x4b, 0x0a, 0x08, 0x41, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x41, 0x52, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x4d, 0x44, 0x36, 0x34, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x52, 0x43, 0x48,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x4d, 0x36, 0x34, 0x10, 0x02, 0x22, 0x99, 0x01,
	0x0a, 0x04, 0x54, 0x69, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x49, 0x45, 0x52,
	0x5f, 0x53, 0x41, 0x54, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x43, 0x49, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x49,
	0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f,
	0x54, 0x49, 0x45, 0x52, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x46,
	0x52, 0x45, 0x45, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x49,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08,
	0x54, 0x49, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49,
	0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x07, 0x32, 0xc5, 0x02, 0x0a, 0x07, 0x42, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x91, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa5, 0x01, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_billing_proto_rawDescOnce sync.Once
	file_billing_proto_rawDescData = file_billing_proto_rawDesc
)

func file_billing_proto_rawDescGZIP() []byte {
	file_billing_proto_rawDescOnce.Do(func() {
		file_billing_proto_rawDescData = protoimpl.X.CompressGZIP(file_billing_proto_rawDescData)
	})
	return file_billing_proto_rawDescData
}

var file_billing_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_billing_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_billing_proto_goTypes = []interface{}{
	(CreateSubscriptionLinkRequest_Type)(0), // 0: api.public.billing.CreateSubscriptionLinkRequest.Type
	(BillingPlan_PlanType)(0),               // 1: api.public.billing.BillingPlan.PlanType
	(BillingPlan_InstanceType)(0),           // 2: api.public.billing.BillingPlan.InstanceType
	(BillingPlan_ArchType)(0),               // 3: api.public.billing.BillingPlan.ArchType
	(BillingPlan_Tier)(0),                   // 4: api.public.billing.BillingPlan.Tier
	(*CreateSubscriptionLinkRequest)(nil),   // 5: api.public.billing.CreateSubscriptionLinkRequest
	(*CreateSubscriptionLinkResponse)(nil),  // 6: api.public.billing.CreateSubscriptionLinkResponse
	(*GetBillingPlanRequest)(nil),           // 7: api.public.billing.GetBillingPlanRequest
	(*GetBillingPlanResponse)(nil),          // 8: api.public.billing.GetBillingPlanResponse
	(*BillingPlan)(nil),                     // 9: api.public.billing.BillingPlan
	(*timestamppb.Timestamp)(nil),           // 10: google.protobuf.Timestamp
}
var file_billing_proto_depIdxs = []int32{
	0,  // 0: api.public.billing.CreateSubscriptionLinkRequest.type:type_name -> api.public.billing.CreateSubscriptionLinkRequest.Type
	9,  // 1: api.public.billing.GetBillingPlanResponse.plan:type_name -> api.public.billing.BillingPlan
	1,  // 2: api.public.billing.BillingPlan.type:type_name -> api.public.billing.BillingPlan.PlanType
	10, // 3: api.public.billing.BillingPlan.started_at:type_name -> google.protobuf.Timestamp
	2,  // 4: api.public.billing.BillingPlan.allowed_instances:type_name -> api.public.billing.BillingPlan.InstanceType
	3,  // 5: api.public.billing.BillingPlan.allowed_archs:type_name -> api.public.billing.BillingPlan.ArchType
	4,  // 6: api.public.billing.BillingPlan.tier:type_name -> api.public.billing.BillingPlan.Tier
	2,  // 7: api.public.billing.BillingPlan.default_instance_type:type_name -> api.public.billing.BillingPlan.InstanceType
	7,  // 8: api.public.billing.Billing.GetBillingPlan:input_type -> api.public.billing.GetBillingPlanRequest
	5,  // 9: api.public.billing.Billing.CreateSubscriptionLink:input_type -> api.public.billing.CreateSubscriptionLinkRequest
	8,  // 10: api.public.billing.Billing.GetBillingPlan:output_type -> api.public.billing.GetBillingPlanResponse
	6,  // 11: api.public.billing.Billing.CreateSubscriptionLink:output_type -> api.public.billing.CreateSubscriptionLinkResponse
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_billing_proto_init() }
func file_billing_proto_init() {
	if File_billing_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_billing_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubscriptionLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubscriptionLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBillingPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBillingPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_billing_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillingPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_billing_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_billing_proto_goTypes,
		DependencyIndexes: file_billing_proto_depIdxs,
		EnumInfos:         file_billing_proto_enumTypes,
		MessageInfos:      file_billing_proto_msgTypes,
	}.Build()
	File_billing_proto = out.File
	file_billing_proto_rawDesc = nil
	file_billing_proto_goTypes = nil
	file_billing_proto_depIdxs = nil
}
