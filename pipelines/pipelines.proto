syntax = "proto3";
package api.public.pipelines;
option go_package = "./pipelines";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

service Pipelines {
  // ManualBuild manually triggers a Pipeline build with the
  // provided Targets, Args and Secrets. The new build_id is returned.
  rpc ManualBuild(ManualBuildRequest) returns (ManualBuildResponse) {
    option (google.api.http) = {
      post: "/api/v0/projects/{project_id}/pipelines/{pipeline_id}/builds"
      body: "*"
    };
  }
  // LaunchSatellite starts a new Earthly Satellite instance on the latest version.
  // The instance can be used by users to build their local, Cloud, or 3rd-party CI builds.
  rpc LaunchSatellite(LaunchSatelliteRequest) returns (LaunchSatelliteResponse) {
    option (google.api.http) = {
      post: "/api/v0/satellites"
      body: "*"
    };
  }
  // ListSatellites returns a list of Earthly Satellite instances available in the organization.
  rpc ListSatellites(ListSatellitesRequest) returns (ListSatellitesResponse) {
    option (google.api.http) = {
      get: "/api/v0/satellites"
    };
  }
  // UpdateSatellite updates a Satellite instance to the latest version.
  // (I.e. the latest AMI we have in AWS).
  // Calling this may result in some down-time on the instance while it updates.
  rpc UpdateSatellite(UpdateSatelliteRequest) returns (UpdateSatelliteResponse) {
    option (google.api.http) = {
      post: "/api/v0/satellites/{name}/update"
      body: "*"
    };
  }
  // DeleteSatellite decommissions a Satellite instance.
  rpc DeleteSatellite(DeleteSatelliteRequest) returns (DeleteSatelliteResponse) {
    option (google.api.http) = {
      delete: "/api/v0/satellites/{name}"
    };
  }
  // GetSatellite retrieves the details of a particular Satellite instance.
  // Mainly intended for use by Buildkit Proxy when establishing a new connection to an instance.
  rpc GetSatellite(GetSatelliteRequest) returns (GetSatelliteResponse) {
    option (google.api.http) = {
      get: "/api/v0/satellites/{name}"
    };
  }
  // WakeSatellite starts the instance from a sleep state.
  rpc WakeSatellite(WakeSatelliteRequest) returns (WakeSatelliteResponse) {
    option (google.api.http) = {
      post: "/api/v0/satellites/{name}/wake"
      body: "*"
    };
  }
  // ReserveSatellite wakes a satellite when necessary and calls Buildkit's Reserve.
  rpc ReserveSatellite(ReserveSatelliteRequest) returns (stream ReserveSatelliteResponse) {}
  // ListRemoteRepos uses the GitHub API to list remote repositories.
  rpc ListRemoteRepos(ListRemoteReposRequest) returns (ListRemoteReposResponse) {
    option (google.api.http) = {
      get: "/api/v0/repos/remote"
    };
  }
  // ListRemoteOrgs lists Git repository organizations from external providers like GitHub.
  rpc ListRemoteOrgs(ListRemoteOrgsRequest) returns (ListRemoteOrgsResponse) {
    option (google.api.http) = {
      get: "/api/v0/repos/orgs"
    };
  }
  // AddProjectRepos adds one or more repositories to a project.
  rpc AddProjectRepos(AddProjectReposRequest) returns (AddProjectReposResponse) {
    option (google.api.http) = {
      post: "/api/v0/repos"
      body: "*"
    };
  }
  // RemoveProjectRepo removes a repository from a project.
  rpc RemoveProjectRepo(RemoveProjectRepoRequest) returns (RemoveProjectRepoResponse) {
    option (google.api.http) = {
      delete: "/api/v0/repos/{id}"
    };
  }
  // ListProjectRespos lists all project repositories.
  rpc ListProjectRepos(ListProjectReposRequest) returns (ListProjectReposResponse) {
    option (google.api.http) = {
      get: "/api/v0/repos"
    };
  }
  // ListRemotePipelines uses the GitHub API to list pipeline definitions present in a remote repository.
  rpc ListRemotePipelines(ListRemotePipelinesRequest) returns (ListRemotePipelinesResponse) {
    option (google.api.http) = {
      get: "/api/v0/pipelines/remote"
    };
  }
  // ListPipelines returns a collection of piplines that can be filtered by project.
  rpc ListPipelines(ListPipelinesRequest) returns (ListPipelinesResponse) {
    option (google.api.http) = {
      get: "/api/v0/pipelines"
    };
  }
  // AddPipelines will create one or more pipelines.
  rpc AddPipelines(AddPipelinesRequest) returns (AddPipelinesResponse) {
    option (google.api.http) = {
      post: "/api/v0/pipelines"
      body: "*"
    };
  }
  // RemovePipeline will remove an existing pipeline.
  rpc RemovePipeline(RemovePipelineRequest) returns (RemovePipelineResponse) {
    option (google.api.http) = {
      delete: "/api/v0/pipelines/{pipeline_id}"
    };
  }
}

message ManualBuildRequest {
  string org_id = 1;
  string project_id = 2;
  string pipeline_id = 3;
  repeated Target targets = 4;
}

message ManualBuildResponse {
  string build_id = 1;
}

message Target {
  string reference = 1;
  repeated TargetArg args = 2;
  repeated TargetSecret secrets = 4;
}

message TargetArg {
  string name = 1;
  string value = 2;
}

message TargetSecret {
  string name = 1;
  string value = 2;
}

message LaunchSatelliteRequest {
  string org_id = 1;
  string name = 2; // characters should be valid within a URL
  string platform = 3; // Supported values now are: linux/amd64, linux/arm64
  repeated string feature_flags = 4;
}

enum SatelliteStatus {
  SATELLITE_STATUS_UNKNOWN = 0;
  SATELLITE_STATUS_CREATING = 1;
  SATELLITE_STATUS_OPERATIONAL = 2;
  SATELLITE_STATUS_OFFLINE = 3;
  SATELLITE_STATUS_DESTROYING = 4;
  SATELLITE_STATUS_FAILED = 5;
  SATELLITE_STATUS_SLEEP = 6;
  SATELLITE_STATUS_STARTING = 7;
  SATELLITE_STATUS_STOPPING = 8;
}

message LaunchSatelliteResponse {
  SatelliteStatus status = 1;
  string version = 2; // deprecated
}

message ListSatellitesRequest {
  string org_id = 1;
}

message ListSatellitesResponse {
  message SatelliteInstance {
    string user_id = 1;
    string name = 2;
    string platform = 3;
    SatelliteStatus status = 4;
    string version = 5; // deprecated
  }
  repeated SatelliteInstance instances = 1;
}

message UpdateSatelliteRequest {
  string org_id = 1;
  string name = 2;
}

message UpdateSatelliteResponse {}

message DeleteSatelliteRequest {
  string org_id = 1;
  string name = 2;
}

message DeleteSatelliteResponse{}

message GetSatelliteRequest {
  string org_id = 1;
  string name = 2;
}

message GetSatelliteResponse {
  string user_id = 1;
  string platform = 2;
  SatelliteStatus status = 3;
  string version = 4; // deprecated
  string id = 5;
  string private_ip = 6;
  string private_dns = 7;
}

message WakeSatelliteRequest {
  string org_id = 1;
  string name = 2;
}

message WakeSatelliteResponse {
  // triggered_wake_up indicates if the satellite was asleep when the request
  // was made, and hence may take a short moment to wake back up.
  bool triggered_wake_up = 1;
}

message ReserveSatelliteRequest {
  string org_id = 1;
  string name = 2;
}

message ReserveSatelliteResponse {
  SatelliteStatus status = 1;
}

message ListRemoteReposRequest {
  string org = 1;
}

message RemoteRepo {
  string name = 1;
  string org = 2;
  string url = 3;
  string provider = 4;
}

message ListRemoteReposResponse {
  repeated RemoteRepo repos = 1;
}

message ProjectRepo {
  string id = 1;
  string name = 2;
  string org = 3;
  string url = 4;
  string provider = 5;
  string project = 6;
  google.protobuf.Timestamp created_at = 7;
  string provider_org = 8;
}

message AddProjectReposRequest {
  repeated ProjectRepo repos = 1;
}

message AddProjectReposResponse {
  repeated ProjectRepo repos = 1;
}

message RemoveProjectRepoRequest {
  string id = 1;
}

message RemoveProjectRepoResponse {}

message ListProjectReposRequest {
  string project = 1;
}

message ListProjectReposResponse {
  repeated ProjectRepo repos = 1;
}

enum TriggerType {
  TRIGGER_TYPE_UNSPECIFIED = 0;
  TRIGGER_TYPE_MANUAL = 1;
  TRIGGER_TYPE_PUSH = 2;
  TRIGGER_TYPE_PR = 3;
}

message PipelineTrigger {
  TriggerType type = 1;
  string modifier = 2;
}

message PipelineArg {
  string name = 1;
  string default_value = 2;
}

message RemotePipeline {
  string repo = 1;
  string path = 2;
  string name = 3;
  string org = 4;
  repeated PipelineTrigger triggers = 5;
  repeated PipelineArg args = 6;
  int32 start_line = 7;
  int32 end_line = 8;
}

message Pipeline {
  string repo = 1;
  string path = 2;
  string name = 3;
  string org = 4;
  repeated PipelineTrigger triggers = 5;
  repeated PipelineArg args = 6;
  bool enabled = 7;
  string repo_id = 8;
  string project = 9;
  bool is_push = 10;
  string id = 11;
}

message EarthfileParsingError {
  string path = 1;
  string error = 2;
}

message ListRemotePipelinesRequest {
  string repo = 1;
  string org = 2;
  string provider = 3;
}

message ListRemotePipelinesResponse {
  repeated RemotePipeline pipelines = 1;
  repeated EarthfileParsingError parsing_errors = 2;
}

message ListRemoteOrgsRequest {}

message RemoteOrg {
  string name = 1;
  string membership = 2;
  string provider = 3;
  bool app_installed = 4;
}

message ListRemoteOrgsResponse {
  repeated RemoteOrg remote_orgs = 1;
}

message ListPipelinesRequest {
  string project = 1;
}

message ListPipelinesResponse {
  repeated Pipeline pipelines = 1;
}

message AddPipelinesRequest {
  repeated Pipeline pipelines = 1;
}

message AddPipelinesResponse {
  repeated Pipeline pipelines = 1;
}

message RemovePipelineRequest {
  string pipeline_id = 1;
}

message RemovePipelineResponse {}
