syntax = "proto3";
package api.public.compute;
option go_package = "./compute";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// buf:lint:ignore SERVICE_SUFFIX
service Compute {
  // LaunchSatellite starts a new Earthly Satellite instance on the latest version.
  // The instance can be used by users to build their local, Cloud, or 3rd-party CI builds.
  rpc LaunchSatellite(LaunchSatelliteRequest) returns (LaunchSatelliteResponse) {
    option (google.api.http) = {
      post: "/api/v0/satellites"
      body: "*"
    };
  }
  // ListSatellites returns a list of Earthly Satellite instances available in the organization.
  rpc ListSatellites(ListSatellitesRequest) returns (ListSatellitesResponse) {
    option (google.api.http) = {
      get: "/api/v0/satellites"
    };
  }
  // UpdateSatellite updates a Satellite instance to the latest version.
  // (I.e. the latest AMI we have in AWS).
  // Calling this may result in some down-time on the instance while it updates.
  rpc UpdateSatellite(UpdateSatelliteRequest) returns (UpdateSatelliteResponse) {
    option (google.api.http) = {
      post: "/api/v0/satellites/{name}/update"
      body: "*"
    };
  }
  // DeleteSatellite decommissions a Satellite instance.
  rpc DeleteSatellite(DeleteSatelliteRequest) returns (DeleteSatelliteResponse) {
    option (google.api.http) = {
      delete: "/api/v0/satellites/{name}"
    };
  }
  // GetSatellite retrieves the details of a particular Satellite instance.
  // Mainly intended for use by Buildkit Proxy when establishing a new connection to an instance.
  rpc GetSatellite(GetSatelliteRequest) returns (GetSatelliteResponse) {
    option (google.api.http) = {
      get: "/api/v0/satellites/{name}"
    };
  }

  // RegisterSatellite is called by a satellite once it is online and ready to accept builds.
  // The registration contains the satellite's connection info.
  // A registration token is returned, which must be passed-in to other endpoints related to registration,
  // such as DeregisterSatellite and SatelliteHeartbeat.
  rpc RegisterSatellite(RegisterSatelliteRequest) returns (RegisterSatelliteResponse) {}

  // DeregisterSatellite immediately removes the satellite from the organization.
  rpc DeregisterSatellite(DeregisterSatelliteRequest) returns (DeregisterSatelliteResponse) {}

  // SatelliteHeartbeat must be called periodically while a satellite is online.
  // The heartbeat request may also contain useful information about the satellite's state,
  // such as its op-load, or (in the future) session history.
  // If the compute service stops receiving heartbeats unexpectedly,
  // the satellite is automatically deregistered.
  rpc SatelliteHeartbeat(SatelliteHeartbeatRequest) returns (SatelliteHeartbeatResponse) {}

  // WakeSatellite wakes a satellite that is in a sleep state.
  // The response returns a stream that sends updates as the satellite wakes up.
  // For example, the stream may send the following statuses:
  //    SLEEP -> STARTING -> ... -> STARTING -> OPERATIONAL -> EOF
  rpc WakeSatellite(WakeSatelliteRequest) returns (stream WakeSatelliteResponse) {}

  // SleepSatellite puts a satellite to sleep when it is awake.
  // The response is a stream which looks like the inverse of a WakeSatellite response.
  // Example when satellite is awake:
  //   OPERATIONAL -> STOPPING -> ... -> STOPPING -> SLEEP -> EOF
  // Example when satellite is already asleep:
  //   SLEEP -> EOF
  rpc SleepSatellite(SleepSatelliteRequest) returns (stream SleepSatelliteResponse) {}

  // ReserveSatellite both wakes the instance (if necessary) and calls reserve on buildkit.
  // It is a streaming call which returns status updates during the wake up process,
  // which can take a few moments. Some examples:
  // When the satellite is already awake, a single event is emitted before closing the stream:
  //   OPERATIONAL -> EOF
  // When the satellite is asleep, several events are emitted in the following sequence:
  //   SLEEP -> STARTING -> ... -> STARTING -> OPERATIONAL -> EOF
  // When the satellite is already being woken up, or launching for the first time:
  //   STARTING -> ... -> STARTING -> OPERATIONAL -> EOF
  // When the satellite is actively being put to sleep and needs to finish that process first:
  //   STOPPING -> ... -> STARTING -> ... -> OPERATIONAL -> EOF
  rpc ReserveSatellite(ReserveSatelliteRequest) returns (stream ReserveSatelliteResponse) {}

  // SetGithubTokenRequest sets the configuration to enable triggering satellite builds from GHA (GitHub Actions).
  rpc SetGithubToken(SetGithubTokenRequest) returns (SetGithubTokenResponse) {
    option (google.api.http) = {
      post: "/api/v0/github/token"
      body: "*"
    };
  }

  // PickGithubJobs lets satellites retrieve the GHA job information and run a JIT runner
  // Jobs returned are marked as picked, and won't be returned in another request for a limited period of time.
  rpc PickGithubJobs(PickGithubJobsRequest) returns (stream PickGithubJobsResponse) {}

  // ConfigureCloud sets up (or re-does the setup) for the cloud with the given name. The setup validates we can access
  // the other account, and that the other account has all the pieces we need to manage satellites in it. Not a stream
  // because it should be a couple rather quick API calls on our end.
  rpc ConfigureCloud(ConfigureCloudRequest) returns (ConfigureCloudResponse) {
    option (google.api.http) = {
      post: "/api/v0/clouds"
      body: "*"
    };
  }

  // UseCloud sets the cloud with the given name as default, assuming it passes validation.
  rpc UseCloud(UseCloudRequest) returns (UseCloudResponse) {
    option (google.api.http) = {
      post: "/api/v0/clouds/{name}"
      body: "*"
    };
  }

  // ListClouds lists all the clouds available. Listing the clouds also checks the status of each cloud.
  rpc ListClouds(ListCloudsRequest) returns (ListCloudsResponse) {
    option (google.api.http) = {
      get: "/api/v0/clouds"
    };
  }

  // DeleteCloud removes the named cloud, as long as it has no satellites in it. Not a stream because it should be quick.
  rpc DeleteCloud(DeleteCloudRequest) returns (DeleteCloudResponse) {
    option (google.api.http) = {
      delete: "/api/v0/clouds/{name}"
    };
  }
}


message DeleteCloudRequest{
  string org_id = 1;
  string name = 2;
  // no force option like satellites; because it would need to delete all satellites within the cloud first.
  // API should just deny if there are satellites.
}
message DeleteCloudResponse {}


message ListCloudsRequest {
  string org_id = 1;
}

message ListCloudsResponse {
  message CloudInstallation {
    string cloud_name = 1;
    int32 num_satellites = 2;
    bool is_default = 3;
    CloudStatus status = 4;
    string status_context = 5;
  }
  repeated CloudInstallation clouds = 1;
}

message ConfigureCloudRequest {
  string org_id = 1;
  string name = 2;
  bool set_default = 3;
  string ssh_key_name = 4;
  string compute_role_arn = 5;
  string account_id = 6;
  repeated string allowed_subnet_ids = 7;
  string security_group_id = 8;
  string region = 9;
  string instance_profile_arn = 10;
}

enum CloudStatus {
  CLOUD_STATUS_UNKNOWN = 0; // Preserve the 0 value

  CLOUD_STATUS_PROBLEM = 1           [deprecated = true]; // There is a problem with this cloud configuration
  CLOUD_STATUS_ACCOUNT_CONNECTED = 2 [deprecated = true]; // We can assume a role in the account and start configuration
  CLOUD_STATUS_ACCOUNT_ACTIVE = 3    [deprecated = true]; // We have all the parts we need from the account to create a cloud configuration

  CLOUD_STATUS_GREEN = 4;  // Everything is OK
  CLOUD_STATUS_YELLOW = 5; // We had some access, but there was a problem
  CLOUD_STATUS_RED = 6;    // No access
}


message ConfigureCloudResponse {
  CloudStatus status = 1;
  string message = 2;
}

message UseCloudRequest {
  string org_id = 1;
  string name = 2;
}

message UseCloudResponse {
  CloudStatus status = 1;
  string message = 2;
}

message SetGithubTokenRequest{
  // Earthly org id
  string org_id = 1;
  // Org name is required
  string github_org_name = 2;
  // Repo name is optional. Leave it empty to set an org-wide token
  string github_repo_name = 3;
  // https://github.com/settings/tokens. The token is required to have permissions to:
  // - Register a repo/org -scoped webhook to retrieve GHA job status events
  // - Create a JIT GHA self hosted runner associated to the org/repo
  //   - https://docs.github.com/en/rest/actions/self-hosted-runners?apiVersion=2022-11-28#create-configuration-for-a-just-in-time-runner-for-an-organization
  //   - https://docs.github.com/en/rest/actions/self-hosted-runners?apiVersion=2022-11-28#create-configuration-for-a-just-in-time-runner-for-a-repository
  string github_token = 4;
}

message SetGithubTokenResponse {
}

message PickGithubJobsRequest{
  // Earthly org id
  string org_id = 1;
  string satellite_name = 2;
}

message PickGithubJobsResponse {
  message Job {
    int64 gh_job_id = 1;
    string jit_configuration = 2;
    string pre_script_message = 3;
    int32 pre_script_exit_code = 4;
    repeated string cache_folders = 5;
    string org_name = 6;
  }
  Job job = 1;
}


message LaunchSatelliteRequest {
  string org_id = 1;
  string name = 2; // characters should be valid within a URL
  string platform = 3; // Supported values now are: linux/amd64, linux/arm64
  repeated string feature_flags = 4;
  string size = 5; // small, medium, large
  string version = 6; // Which version data to use when launching satellite
  string maintenance_window_start = 7; // when can we auto-update your satellite
  bool maintenance_weekends_only = 8; // Auto-updates only run on weekends
  string cloud_name = 9; // Which cloud installation to use, empty means default
}

enum SatelliteStatus {
  SATELLITE_STATUS_UNKNOWN = 0;
  SATELLITE_STATUS_CREATING = 1;
  SATELLITE_STATUS_OPERATIONAL = 2;
  SATELLITE_STATUS_OFFLINE = 3;
  SATELLITE_STATUS_DESTROYING = 4;
  SATELLITE_STATUS_FAILED = 5;
  SATELLITE_STATUS_SLEEP = 6;
  SATELLITE_STATUS_STARTING = 7;
  SATELLITE_STATUS_STOPPING = 8;
  SATELLITE_STATUS_UPDATING = 9;
}

message LaunchSatelliteResponse {
  SatelliteStatus status = 1;
  string version = 2;
  string maintenance_window_start = 3;
  string maintenance_window_end = 4;
  int32 revision_id = 5;
}

message ListSatellitesRequest {
  string org_id = 1;
  bool include_hidden = 2;
}

message ListSatellitesResponse {
  message SatelliteInstance {
    string user_id = 1;
    string name = 2;
    string platform = 3;
    SatelliteStatus status = 4;
    string version = 5;
    string size = 6;
    bool hidden = 7;
    google.protobuf.Duration cache_retention = 8;
    google.protobuf.Timestamp last_used = 9;
    SatelliteSpecs specs = 10;
    string cloud_name = 11;
  }
  repeated SatelliteInstance instances = 1;
}


message SatelliteSpecs {
  string platform = 1;
  int32 vcpus = 2;
  double memory_gib = 3;
  double cache_size_gib = 4;
  string size = 5;
  int32 max_op_load = 6;
}

message UpdateSatelliteRequest {
  string org_id = 1;
  string name = 2;
  string version = 3;
  bool drop_cache = 4; // preserve cache during upgrade, or not?
  string maintenance_window_start = 5;
  repeated string feature_flags = 6;
  bool maintenance_weekends_only = 7;
  string size = 8; // Changes the size of the satellite when set
  string platform = 9; // Changes the platform of the satellite when set
}

message UpdateSatelliteResponse {}

message DeleteSatelliteRequest {
  string org_id = 1;
  string name = 2;
  // Force the satellite removal, even if it's operational.
  // Currently only applies to self-hosted satellites.
  bool force = 3;
}

message DeleteSatelliteResponse{}

message GetSatelliteRequest {
  string org_id = 1;
  string name = 2;
}

message GetSatelliteResponse {
  string user_id = 1;
  string platform = 2;
  SatelliteStatus status = 3;
  string version = 4;
  string id = 5;
  string private_ip = 6;
  string private_dns = 7;
  string size = 8;
  repeated string feature_flags = 9;
  string maintenance_window_start = 10;
  string maintenance_window_end = 11;
  int32 revision_id = 12;
  bool version_pinned = 13;
  bool maintenance_weekends_only = 14;
  bool hidden = 15;
  google.protobuf.Duration cache_retention = 16;
  google.protobuf.Timestamp last_used = 17;
  reserved 18; // old metrics field
  bool is_managed = 19;
  TLSCertificate certificate = 20;
  string cloud_name = 21;
  string satellite_address = 22;
}

message WakeSatelliteRequest {
  string org_id = 1;
  string name = 2;
  google.protobuf.Duration update_interval = 3;
}

message WakeSatelliteResponse {
  SatelliteStatus status = 1;
}

message SleepSatelliteRequest {
  string org_id = 1;
  string name = 2;
  google.protobuf.Duration update_interval = 3;
}

message SleepSatelliteResponse {
  SatelliteStatus status = 1;
}

message ReserveSatelliteRequest {
  string org_id = 1;
  string name = 2;
  string commit_email = 3;
  bool is_ci = 4;
  google.protobuf.Duration update_interval = 5;
  string git_config_email = 6;
  message Metadata {
   repeated string env_entry_names = 1;
   string cli_version = 2;
  }
  Metadata metadata = 7;
}

message ReserveSatelliteResponse {
  SatelliteStatus status = 1;
}

message TLSCertificate {
  bytes client_ca = 1;
  bytes client_ca_key = 2;
  bytes root_ca = 3;
}

message RegisterSatelliteRequest {
  string org_id = 1;
  string satellite_name = 2;
  string satellite_host = 3;
  int32 satellite_port = 4;
  string platform = 5;
  string version = 6;
  TLSCertificate certificate = 7;
  string registration_token = 8; // Optional registration token, when re-registering
}

message RegisterSatelliteResponse {
  string registration_token = 1;
}

message DeregisterSatelliteRequest {
  string registration_token = 1;
}

message DeregisterSatelliteResponse {}

message BuildkitSession {
  string session_id = 1;
  google.protobuf.Timestamp started_at = 2;
  google.protobuf.Timestamp ended_at = 3;
}

message SatelliteHeartbeatRequest {
  string registration_token = 1;
  int32 op_load = 2;
  google.protobuf.Duration duration_idle = 3;
  repeated BuildkitSession session_history = 4;
}

message SatelliteHeartbeatResponse {}
