// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: compute.proto

package compute

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SatelliteStatus int32

const (
	SatelliteStatus_SATELLITE_STATUS_UNKNOWN     SatelliteStatus = 0
	SatelliteStatus_SATELLITE_STATUS_CREATING    SatelliteStatus = 1
	SatelliteStatus_SATELLITE_STATUS_OPERATIONAL SatelliteStatus = 2
	SatelliteStatus_SATELLITE_STATUS_OFFLINE     SatelliteStatus = 3
	SatelliteStatus_SATELLITE_STATUS_DESTROYING  SatelliteStatus = 4
	SatelliteStatus_SATELLITE_STATUS_FAILED      SatelliteStatus = 5
	SatelliteStatus_SATELLITE_STATUS_SLEEP       SatelliteStatus = 6
	SatelliteStatus_SATELLITE_STATUS_STARTING    SatelliteStatus = 7
	SatelliteStatus_SATELLITE_STATUS_STOPPING    SatelliteStatus = 8
	SatelliteStatus_SATELLITE_STATUS_UPDATING    SatelliteStatus = 9
)

// Enum value maps for SatelliteStatus.
var (
	SatelliteStatus_name = map[int32]string{
		0: "SATELLITE_STATUS_UNKNOWN",
		1: "SATELLITE_STATUS_CREATING",
		2: "SATELLITE_STATUS_OPERATIONAL",
		3: "SATELLITE_STATUS_OFFLINE",
		4: "SATELLITE_STATUS_DESTROYING",
		5: "SATELLITE_STATUS_FAILED",
		6: "SATELLITE_STATUS_SLEEP",
		7: "SATELLITE_STATUS_STARTING",
		8: "SATELLITE_STATUS_STOPPING",
		9: "SATELLITE_STATUS_UPDATING",
	}
	SatelliteStatus_value = map[string]int32{
		"SATELLITE_STATUS_UNKNOWN":     0,
		"SATELLITE_STATUS_CREATING":    1,
		"SATELLITE_STATUS_OPERATIONAL": 2,
		"SATELLITE_STATUS_OFFLINE":     3,
		"SATELLITE_STATUS_DESTROYING":  4,
		"SATELLITE_STATUS_FAILED":      5,
		"SATELLITE_STATUS_SLEEP":       6,
		"SATELLITE_STATUS_STARTING":    7,
		"SATELLITE_STATUS_STOPPING":    8,
		"SATELLITE_STATUS_UPDATING":    9,
	}
)

func (x SatelliteStatus) Enum() *SatelliteStatus {
	p := new(SatelliteStatus)
	*p = x
	return p
}

func (x SatelliteStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SatelliteStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_proto_enumTypes[0].Descriptor()
}

func (SatelliteStatus) Type() protoreflect.EnumType {
	return &file_compute_proto_enumTypes[0]
}

func (x SatelliteStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SatelliteStatus.Descriptor instead.
func (SatelliteStatus) EnumDescriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{0}
}

type GetGithubJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"` // Org name is required
}

func (x *GetGithubJobRequest) Reset() {
	*x = GetGithubJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGithubJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGithubJobRequest) ProtoMessage() {}

func (x *GetGithubJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGithubJobRequest.ProtoReflect.Descriptor instead.
func (*GetGithubJobRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{0}
}

func (x *GetGithubJobRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type SetGithubTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Earthly org id
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// Org name is required
	GithubOrgName string `protobuf:"bytes,2,opt,name=github_org_name,json=githubOrgName,proto3" json:"github_org_name,omitempty"`
	// Repo name is optional. Leave it empty to set an org-wide token
	GithubRepoName string `protobuf:"bytes,3,opt,name=github_repo_name,json=githubRepoName,proto3" json:"github_repo_name,omitempty"`
	// https://github.com/settings/tokens. The token is required to have permissions to:
	// - Register a repo/org -scoped webhook to retrieve GHA job status events
	// - Create a JIT GHA self hosted runner associated to the org/repo
	//   - https://docs.github.com/en/rest/actions/self-hosted-runners?apiVersion=2022-11-28#create-configuration-for-a-just-in-time-runner-for-an-organization
	//   - https://docs.github.com/en/rest/actions/self-hosted-runners?apiVersion=2022-11-28#create-configuration-for-a-just-in-time-runner-for-a-repository
	GithubToken string `protobuf:"bytes,4,opt,name=github_token,json=githubToken,proto3" json:"github_token,omitempty"`
}

func (x *SetGithubTokenRequest) Reset() {
	*x = SetGithubTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGithubTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGithubTokenRequest) ProtoMessage() {}

func (x *SetGithubTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGithubTokenRequest.ProtoReflect.Descriptor instead.
func (*SetGithubTokenRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{1}
}

func (x *SetGithubTokenRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *SetGithubTokenRequest) GetGithubOrgName() string {
	if x != nil {
		return x.GithubOrgName
	}
	return ""
}

func (x *SetGithubTokenRequest) GetGithubRepoName() string {
	if x != nil {
		return x.GithubRepoName
	}
	return ""
}

func (x *SetGithubTokenRequest) GetGithubToken() string {
	if x != nil {
		return x.GithubToken
	}
	return ""
}

type SetGithubTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Earthly org id
	OrgId         string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	SatelliteName string `protobuf:"bytes,2,opt,name=satellite_name,json=satelliteName,proto3" json:"satellite_name,omitempty"`
	// Start from this id, not-included (optional)
	GhJobId int64 `protobuf:"varint,3,opt,name=gh_job_id,json=ghJobId,proto3" json:"gh_job_id,omitempty"`
}

func (x *SetGithubTokenResponse) Reset() {
	*x = SetGithubTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGithubTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGithubTokenResponse) ProtoMessage() {}

func (x *SetGithubTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGithubTokenResponse.ProtoReflect.Descriptor instead.
func (*SetGithubTokenResponse) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{2}
}

func (x *SetGithubTokenResponse) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *SetGithubTokenResponse) GetSatelliteName() string {
	if x != nil {
		return x.SatelliteName
	}
	return ""
}

func (x *SetGithubTokenResponse) GetGhJobId() int64 {
	if x != nil {
		return x.GhJobId
	}
	return 0
}

type GetGithubJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs []*GetGithubJobResponse_Job `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *GetGithubJobResponse) Reset() {
	*x = GetGithubJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGithubJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGithubJobResponse) ProtoMessage() {}

func (x *GetGithubJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGithubJobResponse.ProtoReflect.Descriptor instead.
func (*GetGithubJobResponse) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{3}
}

func (x *GetGithubJobResponse) GetJobs() []*GetGithubJobResponse_Job {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type LaunchSatelliteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId                   string   `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name                    string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`         // characters should be valid within a URL
	Platform                string   `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"` // Supported values now are: linux/amd64, linux/arm64
	FeatureFlags            []string `protobuf:"bytes,4,rep,name=feature_flags,json=featureFlags,proto3" json:"feature_flags,omitempty"`
	Size                    string   `protobuf:"bytes,5,opt,name=size,proto3" json:"size,omitempty"`                                                                         // small, medium, large
	Version                 string   `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`                                                                   // Which version data to use when launching satellite
	MaintenanceWindowStart  string   `protobuf:"bytes,7,opt,name=maintenance_window_start,json=maintenanceWindowStart,proto3" json:"maintenance_window_start,omitempty"`     // when can we auto-update your satellite
	MaintenanceWeekendsOnly bool     `protobuf:"varint,8,opt,name=maintenance_weekends_only,json=maintenanceWeekendsOnly,proto3" json:"maintenance_weekends_only,omitempty"` // Auto-updates only run on weekends
}

func (x *LaunchSatelliteRequest) Reset() {
	*x = LaunchSatelliteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchSatelliteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchSatelliteRequest) ProtoMessage() {}

func (x *LaunchSatelliteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchSatelliteRequest.ProtoReflect.Descriptor instead.
func (*LaunchSatelliteRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{4}
}

func (x *LaunchSatelliteRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *LaunchSatelliteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LaunchSatelliteRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *LaunchSatelliteRequest) GetFeatureFlags() []string {
	if x != nil {
		return x.FeatureFlags
	}
	return nil
}

func (x *LaunchSatelliteRequest) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *LaunchSatelliteRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *LaunchSatelliteRequest) GetMaintenanceWindowStart() string {
	if x != nil {
		return x.MaintenanceWindowStart
	}
	return ""
}

func (x *LaunchSatelliteRequest) GetMaintenanceWeekendsOnly() bool {
	if x != nil {
		return x.MaintenanceWeekendsOnly
	}
	return false
}

type LaunchSatelliteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                 SatelliteStatus `protobuf:"varint,1,opt,name=status,proto3,enum=api.public.compute.SatelliteStatus" json:"status,omitempty"`
	Version                string          `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	MaintenanceWindowStart string          `protobuf:"bytes,3,opt,name=maintenance_window_start,json=maintenanceWindowStart,proto3" json:"maintenance_window_start,omitempty"`
	MaintenanceWindowEnd   string          `protobuf:"bytes,4,opt,name=maintenance_window_end,json=maintenanceWindowEnd,proto3" json:"maintenance_window_end,omitempty"`
	RevisionId             int32           `protobuf:"varint,5,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
}

func (x *LaunchSatelliteResponse) Reset() {
	*x = LaunchSatelliteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchSatelliteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchSatelliteResponse) ProtoMessage() {}

func (x *LaunchSatelliteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchSatelliteResponse.ProtoReflect.Descriptor instead.
func (*LaunchSatelliteResponse) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{5}
}

func (x *LaunchSatelliteResponse) GetStatus() SatelliteStatus {
	if x != nil {
		return x.Status
	}
	return SatelliteStatus_SATELLITE_STATUS_UNKNOWN
}

func (x *LaunchSatelliteResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *LaunchSatelliteResponse) GetMaintenanceWindowStart() string {
	if x != nil {
		return x.MaintenanceWindowStart
	}
	return ""
}

func (x *LaunchSatelliteResponse) GetMaintenanceWindowEnd() string {
	if x != nil {
		return x.MaintenanceWindowEnd
	}
	return ""
}

func (x *LaunchSatelliteResponse) GetRevisionId() int32 {
	if x != nil {
		return x.RevisionId
	}
	return 0
}

type ListSatellitesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId         string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	IncludeHidden bool   `protobuf:"varint,2,opt,name=include_hidden,json=includeHidden,proto3" json:"include_hidden,omitempty"`
}

func (x *ListSatellitesRequest) Reset() {
	*x = ListSatellitesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSatellitesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSatellitesRequest) ProtoMessage() {}

func (x *ListSatellitesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSatellitesRequest.ProtoReflect.Descriptor instead.
func (*ListSatellitesRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{6}
}

func (x *ListSatellitesRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ListSatellitesRequest) GetIncludeHidden() bool {
	if x != nil {
		return x.IncludeHidden
	}
	return false
}

type ListSatellitesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*ListSatellitesResponse_SatelliteInstance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *ListSatellitesResponse) Reset() {
	*x = ListSatellitesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSatellitesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSatellitesResponse) ProtoMessage() {}

func (x *ListSatellitesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSatellitesResponse.ProtoReflect.Descriptor instead.
func (*ListSatellitesResponse) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{7}
}

func (x *ListSatellitesResponse) GetInstances() []*ListSatellitesResponse_SatelliteInstance {
	if x != nil {
		return x.Instances
	}
	return nil
}

type SatelliteSpecs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform     string  `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	Vcpus        int32   `protobuf:"varint,2,opt,name=vcpus,proto3" json:"vcpus,omitempty"`
	MemoryGib    float64 `protobuf:"fixed64,3,opt,name=memory_gib,json=memoryGib,proto3" json:"memory_gib,omitempty"`
	CacheSizeGib float64 `protobuf:"fixed64,4,opt,name=cache_size_gib,json=cacheSizeGib,proto3" json:"cache_size_gib,omitempty"`
	Size         string  `protobuf:"bytes,5,opt,name=size,proto3" json:"size,omitempty"`
	MaxOpLoad    int32   `protobuf:"varint,6,opt,name=max_op_load,json=maxOpLoad,proto3" json:"max_op_load,omitempty"`
}

func (x *SatelliteSpecs) Reset() {
	*x = SatelliteSpecs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SatelliteSpecs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SatelliteSpecs) ProtoMessage() {}

func (x *SatelliteSpecs) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SatelliteSpecs.ProtoReflect.Descriptor instead.
func (*SatelliteSpecs) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{8}
}

func (x *SatelliteSpecs) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *SatelliteSpecs) GetVcpus() int32 {
	if x != nil {
		return x.Vcpus
	}
	return 0
}

func (x *SatelliteSpecs) GetMemoryGib() float64 {
	if x != nil {
		return x.MemoryGib
	}
	return 0
}

func (x *SatelliteSpecs) GetCacheSizeGib() float64 {
	if x != nil {
		return x.CacheSizeGib
	}
	return 0
}

func (x *SatelliteSpecs) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *SatelliteSpecs) GetMaxOpLoad() int32 {
	if x != nil {
		return x.MaxOpLoad
	}
	return 0
}

type UpdateSatelliteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId                   string   `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name                    string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version                 string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	DropCache               bool     `protobuf:"varint,4,opt,name=drop_cache,json=dropCache,proto3" json:"drop_cache,omitempty"` // preserve cache during upgrade, or not?
	MaintenanceWindowStart  string   `protobuf:"bytes,5,opt,name=maintenance_window_start,json=maintenanceWindowStart,proto3" json:"maintenance_window_start,omitempty"`
	FeatureFlags            []string `protobuf:"bytes,6,rep,name=feature_flags,json=featureFlags,proto3" json:"feature_flags,omitempty"`
	MaintenanceWeekendsOnly bool     `protobuf:"varint,7,opt,name=maintenance_weekends_only,json=maintenanceWeekendsOnly,proto3" json:"maintenance_weekends_only,omitempty"`
	Size                    string   `protobuf:"bytes,8,opt,name=size,proto3" json:"size,omitempty"`         // Changes the size of the satellite when set
	Platform                string   `protobuf:"bytes,9,opt,name=platform,proto3" json:"platform,omitempty"` // Changes the platform of the satellite when set
}

func (x *UpdateSatelliteRequest) Reset() {
	*x = UpdateSatelliteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSatelliteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSatelliteRequest) ProtoMessage() {}

func (x *UpdateSatelliteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSatelliteRequest.ProtoReflect.Descriptor instead.
func (*UpdateSatelliteRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateSatelliteRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *UpdateSatelliteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSatelliteRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpdateSatelliteRequest) GetDropCache() bool {
	if x != nil {
		return x.DropCache
	}
	return false
}

func (x *UpdateSatelliteRequest) GetMaintenanceWindowStart() string {
	if x != nil {
		return x.MaintenanceWindowStart
	}
	return ""
}

func (x *UpdateSatelliteRequest) GetFeatureFlags() []string {
	if x != nil {
		return x.FeatureFlags
	}
	return nil
}

func (x *UpdateSatelliteRequest) GetMaintenanceWeekendsOnly() bool {
	if x != nil {
		return x.MaintenanceWeekendsOnly
	}
	return false
}

func (x *UpdateSatelliteRequest) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *UpdateSatelliteRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type UpdateSatelliteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSatelliteResponse) Reset() {
	*x = UpdateSatelliteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSatelliteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSatelliteResponse) ProtoMessage() {}

func (x *UpdateSatelliteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSatelliteResponse.ProtoReflect.Descriptor instead.
func (*UpdateSatelliteResponse) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{10}
}

type DeleteSatelliteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Force the satellite removal, even if it's operational.
	// Currently only applies to self-hosted satellites.
	Force bool `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteSatelliteRequest) Reset() {
	*x = DeleteSatelliteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSatelliteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSatelliteRequest) ProtoMessage() {}

func (x *DeleteSatelliteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSatelliteRequest.ProtoReflect.Descriptor instead.
func (*DeleteSatelliteRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteSatelliteRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *DeleteSatelliteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteSatelliteRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type DeleteSatelliteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSatelliteResponse) Reset() {
	*x = DeleteSatelliteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSatelliteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSatelliteResponse) ProtoMessage() {}

func (x *DeleteSatelliteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSatelliteResponse.ProtoReflect.Descriptor instead.
func (*DeleteSatelliteResponse) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{12}
}

type GetSatelliteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetSatelliteRequest) Reset() {
	*x = GetSatelliteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSatelliteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSatelliteRequest) ProtoMessage() {}

func (x *GetSatelliteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSatelliteRequest.ProtoReflect.Descriptor instead.
func (*GetSatelliteRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{13}
}

func (x *GetSatelliteRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetSatelliteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetSatelliteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                  string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Platform                string                 `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	Status                  SatelliteStatus        `protobuf:"varint,3,opt,name=status,proto3,enum=api.public.compute.SatelliteStatus" json:"status,omitempty"`
	Version                 string                 `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Id                      string                 `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	PrivateIp               string                 `protobuf:"bytes,6,opt,name=private_ip,json=privateIp,proto3" json:"private_ip,omitempty"`
	PrivateDns              string                 `protobuf:"bytes,7,opt,name=private_dns,json=privateDns,proto3" json:"private_dns,omitempty"`
	Size                    string                 `protobuf:"bytes,8,opt,name=size,proto3" json:"size,omitempty"`
	FeatureFlags            []string               `protobuf:"bytes,9,rep,name=feature_flags,json=featureFlags,proto3" json:"feature_flags,omitempty"`
	MaintenanceWindowStart  string                 `protobuf:"bytes,10,opt,name=maintenance_window_start,json=maintenanceWindowStart,proto3" json:"maintenance_window_start,omitempty"`
	MaintenanceWindowEnd    string                 `protobuf:"bytes,11,opt,name=maintenance_window_end,json=maintenanceWindowEnd,proto3" json:"maintenance_window_end,omitempty"`
	RevisionId              int32                  `protobuf:"varint,12,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
	VersionPinned           bool                   `protobuf:"varint,13,opt,name=version_pinned,json=versionPinned,proto3" json:"version_pinned,omitempty"`
	MaintenanceWeekendsOnly bool                   `protobuf:"varint,14,opt,name=maintenance_weekends_only,json=maintenanceWeekendsOnly,proto3" json:"maintenance_weekends_only,omitempty"`
	Hidden                  bool                   `protobuf:"varint,15,opt,name=hidden,proto3" json:"hidden,omitempty"`
	CacheRetention          *durationpb.Duration   `protobuf:"bytes,16,opt,name=cache_retention,json=cacheRetention,proto3" json:"cache_retention,omitempty"`
	LastUsed                *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=last_used,json=lastUsed,proto3" json:"last_used,omitempty"`
	IsManaged               bool                   `protobuf:"varint,19,opt,name=is_managed,json=isManaged,proto3" json:"is_managed,omitempty"`
	Certificate             *TLSCertificate        `protobuf:"bytes,20,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *GetSatelliteResponse) Reset() {
	*x = GetSatelliteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSatelliteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSatelliteResponse) ProtoMessage() {}

func (x *GetSatelliteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSatelliteResponse.ProtoReflect.Descriptor instead.
func (*GetSatelliteResponse) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{14}
}

func (x *GetSatelliteResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetSatelliteResponse) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *GetSatelliteResponse) GetStatus() SatelliteStatus {
	if x != nil {
		return x.Status
	}
	return SatelliteStatus_SATELLITE_STATUS_UNKNOWN
}

func (x *GetSatelliteResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetSatelliteResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetSatelliteResponse) GetPrivateIp() string {
	if x != nil {
		return x.PrivateIp
	}
	return ""
}

func (x *GetSatelliteResponse) GetPrivateDns() string {
	if x != nil {
		return x.PrivateDns
	}
	return ""
}

func (x *GetSatelliteResponse) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *GetSatelliteResponse) GetFeatureFlags() []string {
	if x != nil {
		return x.FeatureFlags
	}
	return nil
}

func (x *GetSatelliteResponse) GetMaintenanceWindowStart() string {
	if x != nil {
		return x.MaintenanceWindowStart
	}
	return ""
}

func (x *GetSatelliteResponse) GetMaintenanceWindowEnd() string {
	if x != nil {
		return x.MaintenanceWindowEnd
	}
	return ""
}

func (x *GetSatelliteResponse) GetRevisionId() int32 {
	if x != nil {
		return x.RevisionId
	}
	return 0
}

func (x *GetSatelliteResponse) GetVersionPinned() bool {
	if x != nil {
		return x.VersionPinned
	}
	return false
}

func (x *GetSatelliteResponse) GetMaintenanceWeekendsOnly() bool {
	if x != nil {
		return x.MaintenanceWeekendsOnly
	}
	return false
}

func (x *GetSatelliteResponse) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *GetSatelliteResponse) GetCacheRetention() *durationpb.Duration {
	if x != nil {
		return x.CacheRetention
	}
	return nil
}

func (x *GetSatelliteResponse) GetLastUsed() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUsed
	}
	return nil
}

func (x *GetSatelliteResponse) GetIsManaged() bool {
	if x != nil {
		return x.IsManaged
	}
	return false
}

func (x *GetSatelliteResponse) GetCertificate() *TLSCertificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type WakeSatelliteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId          string               `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name           string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UpdateInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=update_interval,json=updateInterval,proto3" json:"update_interval,omitempty"`
}

func (x *WakeSatelliteRequest) Reset() {
	*x = WakeSatelliteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WakeSatelliteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WakeSatelliteRequest) ProtoMessage() {}

func (x *WakeSatelliteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WakeSatelliteRequest.ProtoReflect.Descriptor instead.
func (*WakeSatelliteRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{15}
}

func (x *WakeSatelliteRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *WakeSatelliteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WakeSatelliteRequest) GetUpdateInterval() *durationpb.Duration {
	if x != nil {
		return x.UpdateInterval
	}
	return nil
}

type WakeSatelliteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status SatelliteStatus `protobuf:"varint,1,opt,name=status,proto3,enum=api.public.compute.SatelliteStatus" json:"status,omitempty"`
}

func (x *WakeSatelliteResponse) Reset() {
	*x = WakeSatelliteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WakeSatelliteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WakeSatelliteResponse) ProtoMessage() {}

func (x *WakeSatelliteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WakeSatelliteResponse.ProtoReflect.Descriptor instead.
func (*WakeSatelliteResponse) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{16}
}

func (x *WakeSatelliteResponse) GetStatus() SatelliteStatus {
	if x != nil {
		return x.Status
	}
	return SatelliteStatus_SATELLITE_STATUS_UNKNOWN
}

type SleepSatelliteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId          string               `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name           string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UpdateInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=update_interval,json=updateInterval,proto3" json:"update_interval,omitempty"`
}

func (x *SleepSatelliteRequest) Reset() {
	*x = SleepSatelliteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SleepSatelliteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepSatelliteRequest) ProtoMessage() {}

func (x *SleepSatelliteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepSatelliteRequest.ProtoReflect.Descriptor instead.
func (*SleepSatelliteRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{17}
}

func (x *SleepSatelliteRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *SleepSatelliteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SleepSatelliteRequest) GetUpdateInterval() *durationpb.Duration {
	if x != nil {
		return x.UpdateInterval
	}
	return nil
}

type SleepSatelliteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status SatelliteStatus `protobuf:"varint,1,opt,name=status,proto3,enum=api.public.compute.SatelliteStatus" json:"status,omitempty"`
}

func (x *SleepSatelliteResponse) Reset() {
	*x = SleepSatelliteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SleepSatelliteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepSatelliteResponse) ProtoMessage() {}

func (x *SleepSatelliteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepSatelliteResponse.ProtoReflect.Descriptor instead.
func (*SleepSatelliteResponse) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{18}
}

func (x *SleepSatelliteResponse) GetStatus() SatelliteStatus {
	if x != nil {
		return x.Status
	}
	return SatelliteStatus_SATELLITE_STATUS_UNKNOWN
}

type ReserveSatelliteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId          string                            `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name           string                            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CommitEmail    string                            `protobuf:"bytes,3,opt,name=commit_email,json=commitEmail,proto3" json:"commit_email,omitempty"`
	IsCi           bool                              `protobuf:"varint,4,opt,name=is_ci,json=isCi,proto3" json:"is_ci,omitempty"`
	UpdateInterval *durationpb.Duration              `protobuf:"bytes,5,opt,name=update_interval,json=updateInterval,proto3" json:"update_interval,omitempty"`
	GitConfigEmail string                            `protobuf:"bytes,6,opt,name=git_config_email,json=gitConfigEmail,proto3" json:"git_config_email,omitempty"`
	Metadata       *ReserveSatelliteRequest_Metadata `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ReserveSatelliteRequest) Reset() {
	*x = ReserveSatelliteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveSatelliteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveSatelliteRequest) ProtoMessage() {}

func (x *ReserveSatelliteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveSatelliteRequest.ProtoReflect.Descriptor instead.
func (*ReserveSatelliteRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{19}
}

func (x *ReserveSatelliteRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ReserveSatelliteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReserveSatelliteRequest) GetCommitEmail() string {
	if x != nil {
		return x.CommitEmail
	}
	return ""
}

func (x *ReserveSatelliteRequest) GetIsCi() bool {
	if x != nil {
		return x.IsCi
	}
	return false
}

func (x *ReserveSatelliteRequest) GetUpdateInterval() *durationpb.Duration {
	if x != nil {
		return x.UpdateInterval
	}
	return nil
}

func (x *ReserveSatelliteRequest) GetGitConfigEmail() string {
	if x != nil {
		return x.GitConfigEmail
	}
	return ""
}

func (x *ReserveSatelliteRequest) GetMetadata() *ReserveSatelliteRequest_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ReserveSatelliteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status SatelliteStatus `protobuf:"varint,1,opt,name=status,proto3,enum=api.public.compute.SatelliteStatus" json:"status,omitempty"`
}

func (x *ReserveSatelliteResponse) Reset() {
	*x = ReserveSatelliteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveSatelliteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveSatelliteResponse) ProtoMessage() {}

func (x *ReserveSatelliteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveSatelliteResponse.ProtoReflect.Descriptor instead.
func (*ReserveSatelliteResponse) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{20}
}

func (x *ReserveSatelliteResponse) GetStatus() SatelliteStatus {
	if x != nil {
		return x.Status
	}
	return SatelliteStatus_SATELLITE_STATUS_UNKNOWN
}

type TLSCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientCa    []byte `protobuf:"bytes,1,opt,name=client_ca,json=clientCa,proto3" json:"client_ca,omitempty"`
	ClientCaKey []byte `protobuf:"bytes,2,opt,name=client_ca_key,json=clientCaKey,proto3" json:"client_ca_key,omitempty"`
	RootCa      []byte `protobuf:"bytes,3,opt,name=root_ca,json=rootCa,proto3" json:"root_ca,omitempty"`
}

func (x *TLSCertificate) Reset() {
	*x = TLSCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSCertificate) ProtoMessage() {}

func (x *TLSCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSCertificate.ProtoReflect.Descriptor instead.
func (*TLSCertificate) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{21}
}

func (x *TLSCertificate) GetClientCa() []byte {
	if x != nil {
		return x.ClientCa
	}
	return nil
}

func (x *TLSCertificate) GetClientCaKey() []byte {
	if x != nil {
		return x.ClientCaKey
	}
	return nil
}

func (x *TLSCertificate) GetRootCa() []byte {
	if x != nil {
		return x.RootCa
	}
	return nil
}

type RegisterSatelliteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId         string          `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	SatelliteName string          `protobuf:"bytes,2,opt,name=satellite_name,json=satelliteName,proto3" json:"satellite_name,omitempty"`
	SatelliteHost string          `protobuf:"bytes,3,opt,name=satellite_host,json=satelliteHost,proto3" json:"satellite_host,omitempty"`
	SatellitePort int32           `protobuf:"varint,4,opt,name=satellite_port,json=satellitePort,proto3" json:"satellite_port,omitempty"`
	Platform      string          `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	Version       string          `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	Certificate   *TLSCertificate `protobuf:"bytes,7,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *RegisterSatelliteRequest) Reset() {
	*x = RegisterSatelliteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterSatelliteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSatelliteRequest) ProtoMessage() {}

func (x *RegisterSatelliteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSatelliteRequest.ProtoReflect.Descriptor instead.
func (*RegisterSatelliteRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{22}
}

func (x *RegisterSatelliteRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *RegisterSatelliteRequest) GetSatelliteName() string {
	if x != nil {
		return x.SatelliteName
	}
	return ""
}

func (x *RegisterSatelliteRequest) GetSatelliteHost() string {
	if x != nil {
		return x.SatelliteHost
	}
	return ""
}

func (x *RegisterSatelliteRequest) GetSatellitePort() int32 {
	if x != nil {
		return x.SatellitePort
	}
	return 0
}

func (x *RegisterSatelliteRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *RegisterSatelliteRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RegisterSatelliteRequest) GetCertificate() *TLSCertificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type RegisterSatelliteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegistrationToken string `protobuf:"bytes,1,opt,name=registration_token,json=registrationToken,proto3" json:"registration_token,omitempty"`
}

func (x *RegisterSatelliteResponse) Reset() {
	*x = RegisterSatelliteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterSatelliteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSatelliteResponse) ProtoMessage() {}

func (x *RegisterSatelliteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSatelliteResponse.ProtoReflect.Descriptor instead.
func (*RegisterSatelliteResponse) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{23}
}

func (x *RegisterSatelliteResponse) GetRegistrationToken() string {
	if x != nil {
		return x.RegistrationToken
	}
	return ""
}

type DeregisterSatelliteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegistrationToken string `protobuf:"bytes,1,opt,name=registration_token,json=registrationToken,proto3" json:"registration_token,omitempty"`
}

func (x *DeregisterSatelliteRequest) Reset() {
	*x = DeregisterSatelliteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeregisterSatelliteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeregisterSatelliteRequest) ProtoMessage() {}

func (x *DeregisterSatelliteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeregisterSatelliteRequest.ProtoReflect.Descriptor instead.
func (*DeregisterSatelliteRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{24}
}

func (x *DeregisterSatelliteRequest) GetRegistrationToken() string {
	if x != nil {
		return x.RegistrationToken
	}
	return ""
}

type DeregisterSatelliteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeregisterSatelliteResponse) Reset() {
	*x = DeregisterSatelliteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeregisterSatelliteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeregisterSatelliteResponse) ProtoMessage() {}

func (x *DeregisterSatelliteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeregisterSatelliteResponse.ProtoReflect.Descriptor instead.
func (*DeregisterSatelliteResponse) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{25}
}

type SatelliteHeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegistrationToken string `protobuf:"bytes,1,opt,name=registration_token,json=registrationToken,proto3" json:"registration_token,omitempty"`
	OpLoad            int32  `protobuf:"varint,2,opt,name=op_load,json=opLoad,proto3" json:"op_load,omitempty"`
}

func (x *SatelliteHeartbeatRequest) Reset() {
	*x = SatelliteHeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SatelliteHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SatelliteHeartbeatRequest) ProtoMessage() {}

func (x *SatelliteHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SatelliteHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*SatelliteHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{26}
}

func (x *SatelliteHeartbeatRequest) GetRegistrationToken() string {
	if x != nil {
		return x.RegistrationToken
	}
	return ""
}

func (x *SatelliteHeartbeatRequest) GetOpLoad() int32 {
	if x != nil {
		return x.OpLoad
	}
	return 0
}

type SatelliteHeartbeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SatelliteHeartbeatResponse) Reset() {
	*x = SatelliteHeartbeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SatelliteHeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SatelliteHeartbeatResponse) ProtoMessage() {}

func (x *SatelliteHeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SatelliteHeartbeatResponse.ProtoReflect.Descriptor instead.
func (*SatelliteHeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{27}
}

type GetGithubJobResponse_Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GhJobId           int64  `protobuf:"varint,1,opt,name=gh_job_id,json=ghJobId,proto3" json:"gh_job_id,omitempty"`
	JitConfiguration  string `protobuf:"bytes,2,opt,name=jit_configuration,json=jitConfiguration,proto3" json:"jit_configuration,omitempty"`
	PreScriptMessage  string `protobuf:"bytes,3,opt,name=pre_script_message,json=preScriptMessage,proto3" json:"pre_script_message,omitempty"`
	PreScriptExitCode int32  `protobuf:"varint,4,opt,name=pre_script_exit_code,json=preScriptExitCode,proto3" json:"pre_script_exit_code,omitempty"`
}

func (x *GetGithubJobResponse_Job) Reset() {
	*x = GetGithubJobResponse_Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGithubJobResponse_Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGithubJobResponse_Job) ProtoMessage() {}

func (x *GetGithubJobResponse_Job) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGithubJobResponse_Job.ProtoReflect.Descriptor instead.
func (*GetGithubJobResponse_Job) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GetGithubJobResponse_Job) GetGhJobId() int64 {
	if x != nil {
		return x.GhJobId
	}
	return 0
}

func (x *GetGithubJobResponse_Job) GetJitConfiguration() string {
	if x != nil {
		return x.JitConfiguration
	}
	return ""
}

func (x *GetGithubJobResponse_Job) GetPreScriptMessage() string {
	if x != nil {
		return x.PreScriptMessage
	}
	return ""
}

func (x *GetGithubJobResponse_Job) GetPreScriptExitCode() int32 {
	if x != nil {
		return x.PreScriptExitCode
	}
	return 0
}

type ListSatellitesResponse_SatelliteInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Platform       string                 `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	Status         SatelliteStatus        `protobuf:"varint,4,opt,name=status,proto3,enum=api.public.compute.SatelliteStatus" json:"status,omitempty"`
	Version        string                 `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Size           string                 `protobuf:"bytes,6,opt,name=size,proto3" json:"size,omitempty"`
	Hidden         bool                   `protobuf:"varint,7,opt,name=hidden,proto3" json:"hidden,omitempty"`
	CacheRetention *durationpb.Duration   `protobuf:"bytes,8,opt,name=cache_retention,json=cacheRetention,proto3" json:"cache_retention,omitempty"`
	LastUsed       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=last_used,json=lastUsed,proto3" json:"last_used,omitempty"`
	Specs          *SatelliteSpecs        `protobuf:"bytes,10,opt,name=specs,proto3" json:"specs,omitempty"`
}

func (x *ListSatellitesResponse_SatelliteInstance) Reset() {
	*x = ListSatellitesResponse_SatelliteInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSatellitesResponse_SatelliteInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSatellitesResponse_SatelliteInstance) ProtoMessage() {}

func (x *ListSatellitesResponse_SatelliteInstance) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSatellitesResponse_SatelliteInstance.ProtoReflect.Descriptor instead.
func (*ListSatellitesResponse_SatelliteInstance) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ListSatellitesResponse_SatelliteInstance) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListSatellitesResponse_SatelliteInstance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListSatellitesResponse_SatelliteInstance) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *ListSatellitesResponse_SatelliteInstance) GetStatus() SatelliteStatus {
	if x != nil {
		return x.Status
	}
	return SatelliteStatus_SATELLITE_STATUS_UNKNOWN
}

func (x *ListSatellitesResponse_SatelliteInstance) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ListSatellitesResponse_SatelliteInstance) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *ListSatellitesResponse_SatelliteInstance) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *ListSatellitesResponse_SatelliteInstance) GetCacheRetention() *durationpb.Duration {
	if x != nil {
		return x.CacheRetention
	}
	return nil
}

func (x *ListSatellitesResponse_SatelliteInstance) GetLastUsed() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUsed
	}
	return nil
}

func (x *ListSatellitesResponse_SatelliteInstance) GetSpecs() *SatelliteSpecs {
	if x != nil {
		return x.Specs
	}
	return nil
}

type ReserveSatelliteRequest_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvEntryNames []string `protobuf:"bytes,1,rep,name=env_entry_names,json=envEntryNames,proto3" json:"env_entry_names,omitempty"`
	CliVersion    string   `protobuf:"bytes,2,opt,name=cli_version,json=cliVersion,proto3" json:"cli_version,omitempty"`
}

func (x *ReserveSatelliteRequest_Metadata) Reset() {
	*x = ReserveSatelliteRequest_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveSatelliteRequest_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveSatelliteRequest_Metadata) ProtoMessage() {}

func (x *ReserveSatelliteRequest_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_compute_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveSatelliteRequest_Metadata.ProtoReflect.Descriptor instead.
func (*ReserveSatelliteRequest_Metadata) Descriptor() ([]byte, []int) {
	return file_compute_proto_rawDescGZIP(), []int{19, 0}
}

func (x *ReserveSatelliteRequest_Metadata) GetEnvEntryNames() []string {
	if x != nil {
		return x.EnvEntryNames
	}
	return nil
}

func (x *ReserveSatelliteRequest_Metadata) GetCliVersion() string {
	if x != nil {
		return x.CliVersion
	}
	return ""
}

var File_compute_proto protoreflect.FileDescriptor

var file_compute_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x2c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x22, 0xa3, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x6f, 0x72, 0x67, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x72, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x47, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x61, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x09, 0x67, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x67, 0x68, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x88, 0x02, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x52,
	0x04, 0x6a, 0x6f, 0x62, 0x73, 0x1a, 0xad, 0x01, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x1a, 0x0a,
	0x09, 0x67, 0x68, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x67, 0x68, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6a, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6a, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x70, 0x72, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x69,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa8, 0x02, 0x0a, 0x16, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x6c, 0x79,
	0x22, 0x81, 0x02, 0x0a, 0x17, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53, 0x61, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x34, 0x0a,
	0x16, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x45, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x8d, 0x04, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x1a, 0x96, 0x03, 0x0a, 0x11, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x73, 0x52, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x0e,
	0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x63,
	0x70, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x63, 0x70, 0x75, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x69, 0x62, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x47, 0x69, 0x62, 0x12,
	0x24, 0x0a, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x69,
	0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x47, 0x69, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x78,
	0x5f, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6d, 0x61, 0x78, 0x4f, 0x70, 0x4c, 0x6f, 0x61, 0x64, 0x22, 0xc7, 0x02, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64,
	0x72, 0x6f, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x6d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x61, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x61, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9f, 0x06, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x61,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c,
	0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x34,
	0x0a, 0x16, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x45, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19,
	0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x65, 0x65, 0x6b,
	0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x65, 0x65, 0x6b,
	0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x12, 0x42, 0x0a, 0x0f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0b,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x4a, 0x04, 0x08, 0x12, 0x10, 0x13, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x57, 0x61, 0x6b,
	0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x22, 0x54, 0x0a, 0x15, 0x57, 0x61, 0x6b, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x53,
	0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x15, 0x53, 0x6c, 0x65, 0x65, 0x70,
	0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22,
	0x55, 0x0a, 0x16, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x53,
	0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x91, 0x03, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x63, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x69, 0x73, 0x43, 0x69, 0x12, 0x42, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x50, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x53, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x76, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6c, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x18, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x61, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x6a, 0x0a, 0x0e, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x61, 0x22,
	0xa2, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x61, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x61, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x61,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x61, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44,
	0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x22, 0x4a, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x4b, 0x0a, 0x1a, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x61,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x1d, 0x0a,
	0x1b, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x61, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x63, 0x0a, 0x19,
	0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x4c, 0x6f, 0x61,
	0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a,
	0xc5, 0x02, 0x0a, 0x0f, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x41, 0x54, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x41, 0x54, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x53, 0x41, 0x54, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x41, 0x54, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03,
	0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x41, 0x54, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x49, 0x4e, 0x47, 0x10,
	0x04, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x41, 0x54, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x41, 0x54, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x41,
	0x54, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x41, 0x54,
	0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54,
	0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x41, 0x54, 0x45,
	0x4c, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x32, 0xeb, 0x0c, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x0f, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53, 0x61,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53,
	0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x2f, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x12,
	0x83, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74,
	0x65, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x12, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x73, 0x61, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x74, 0x65, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x8d, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c,
	0x69, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x2a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x73, 0x61,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12,
	0x84, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65,
	0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x2f, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x72, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x13, 0x44, 0x65,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74,
	0x65, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x12, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74,
	0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e,
	0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x53,
	0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0d, 0x57,
	0x61, 0x6b, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x57, 0x61, 0x6b, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x57, 0x61, 0x6b, 0x65,
	0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x6b, 0x0a, 0x0e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x53, 0x61,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x6c, 0x65,
	0x65, 0x70, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x53, 0x61, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x71, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x61, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x88, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x47, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x65,
	0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x63, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x4a, 0x6f, 0x62,
	0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_compute_proto_rawDescOnce sync.Once
	file_compute_proto_rawDescData = file_compute_proto_rawDesc
)

func file_compute_proto_rawDescGZIP() []byte {
	file_compute_proto_rawDescOnce.Do(func() {
		file_compute_proto_rawDescData = protoimpl.X.CompressGZIP(file_compute_proto_rawDescData)
	})
	return file_compute_proto_rawDescData
}

var file_compute_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_compute_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_compute_proto_goTypes = []interface{}{
	(SatelliteStatus)(0),                             // 0: api.public.compute.SatelliteStatus
	(*GetGithubJobRequest)(nil),                      // 1: api.public.compute.GetGithubJobRequest
	(*SetGithubTokenRequest)(nil),                    // 2: api.public.compute.SetGithubTokenRequest
	(*SetGithubTokenResponse)(nil),                   // 3: api.public.compute.SetGithubTokenResponse
	(*GetGithubJobResponse)(nil),                     // 4: api.public.compute.GetGithubJobResponse
	(*LaunchSatelliteRequest)(nil),                   // 5: api.public.compute.LaunchSatelliteRequest
	(*LaunchSatelliteResponse)(nil),                  // 6: api.public.compute.LaunchSatelliteResponse
	(*ListSatellitesRequest)(nil),                    // 7: api.public.compute.ListSatellitesRequest
	(*ListSatellitesResponse)(nil),                   // 8: api.public.compute.ListSatellitesResponse
	(*SatelliteSpecs)(nil),                           // 9: api.public.compute.SatelliteSpecs
	(*UpdateSatelliteRequest)(nil),                   // 10: api.public.compute.UpdateSatelliteRequest
	(*UpdateSatelliteResponse)(nil),                  // 11: api.public.compute.UpdateSatelliteResponse
	(*DeleteSatelliteRequest)(nil),                   // 12: api.public.compute.DeleteSatelliteRequest
	(*DeleteSatelliteResponse)(nil),                  // 13: api.public.compute.DeleteSatelliteResponse
	(*GetSatelliteRequest)(nil),                      // 14: api.public.compute.GetSatelliteRequest
	(*GetSatelliteResponse)(nil),                     // 15: api.public.compute.GetSatelliteResponse
	(*WakeSatelliteRequest)(nil),                     // 16: api.public.compute.WakeSatelliteRequest
	(*WakeSatelliteResponse)(nil),                    // 17: api.public.compute.WakeSatelliteResponse
	(*SleepSatelliteRequest)(nil),                    // 18: api.public.compute.SleepSatelliteRequest
	(*SleepSatelliteResponse)(nil),                   // 19: api.public.compute.SleepSatelliteResponse
	(*ReserveSatelliteRequest)(nil),                  // 20: api.public.compute.ReserveSatelliteRequest
	(*ReserveSatelliteResponse)(nil),                 // 21: api.public.compute.ReserveSatelliteResponse
	(*TLSCertificate)(nil),                           // 22: api.public.compute.TLSCertificate
	(*RegisterSatelliteRequest)(nil),                 // 23: api.public.compute.RegisterSatelliteRequest
	(*RegisterSatelliteResponse)(nil),                // 24: api.public.compute.RegisterSatelliteResponse
	(*DeregisterSatelliteRequest)(nil),               // 25: api.public.compute.DeregisterSatelliteRequest
	(*DeregisterSatelliteResponse)(nil),              // 26: api.public.compute.DeregisterSatelliteResponse
	(*SatelliteHeartbeatRequest)(nil),                // 27: api.public.compute.SatelliteHeartbeatRequest
	(*SatelliteHeartbeatResponse)(nil),               // 28: api.public.compute.SatelliteHeartbeatResponse
	(*GetGithubJobResponse_Job)(nil),                 // 29: api.public.compute.GetGithubJobResponse.Job
	(*ListSatellitesResponse_SatelliteInstance)(nil), // 30: api.public.compute.ListSatellitesResponse.SatelliteInstance
	(*ReserveSatelliteRequest_Metadata)(nil),         // 31: api.public.compute.ReserveSatelliteRequest.Metadata
	(*durationpb.Duration)(nil),                      // 32: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),                    // 33: google.protobuf.Timestamp
}
var file_compute_proto_depIdxs = []int32{
	29, // 0: api.public.compute.GetGithubJobResponse.jobs:type_name -> api.public.compute.GetGithubJobResponse.Job
	0,  // 1: api.public.compute.LaunchSatelliteResponse.status:type_name -> api.public.compute.SatelliteStatus
	30, // 2: api.public.compute.ListSatellitesResponse.instances:type_name -> api.public.compute.ListSatellitesResponse.SatelliteInstance
	0,  // 3: api.public.compute.GetSatelliteResponse.status:type_name -> api.public.compute.SatelliteStatus
	32, // 4: api.public.compute.GetSatelliteResponse.cache_retention:type_name -> google.protobuf.Duration
	33, // 5: api.public.compute.GetSatelliteResponse.last_used:type_name -> google.protobuf.Timestamp
	22, // 6: api.public.compute.GetSatelliteResponse.certificate:type_name -> api.public.compute.TLSCertificate
	32, // 7: api.public.compute.WakeSatelliteRequest.update_interval:type_name -> google.protobuf.Duration
	0,  // 8: api.public.compute.WakeSatelliteResponse.status:type_name -> api.public.compute.SatelliteStatus
	32, // 9: api.public.compute.SleepSatelliteRequest.update_interval:type_name -> google.protobuf.Duration
	0,  // 10: api.public.compute.SleepSatelliteResponse.status:type_name -> api.public.compute.SatelliteStatus
	32, // 11: api.public.compute.ReserveSatelliteRequest.update_interval:type_name -> google.protobuf.Duration
	31, // 12: api.public.compute.ReserveSatelliteRequest.metadata:type_name -> api.public.compute.ReserveSatelliteRequest.Metadata
	0,  // 13: api.public.compute.ReserveSatelliteResponse.status:type_name -> api.public.compute.SatelliteStatus
	22, // 14: api.public.compute.RegisterSatelliteRequest.certificate:type_name -> api.public.compute.TLSCertificate
	0,  // 15: api.public.compute.ListSatellitesResponse.SatelliteInstance.status:type_name -> api.public.compute.SatelliteStatus
	32, // 16: api.public.compute.ListSatellitesResponse.SatelliteInstance.cache_retention:type_name -> google.protobuf.Duration
	33, // 17: api.public.compute.ListSatellitesResponse.SatelliteInstance.last_used:type_name -> google.protobuf.Timestamp
	9,  // 18: api.public.compute.ListSatellitesResponse.SatelliteInstance.specs:type_name -> api.public.compute.SatelliteSpecs
	5,  // 19: api.public.compute.Compute.LaunchSatellite:input_type -> api.public.compute.LaunchSatelliteRequest
	7,  // 20: api.public.compute.Compute.ListSatellites:input_type -> api.public.compute.ListSatellitesRequest
	10, // 21: api.public.compute.Compute.UpdateSatellite:input_type -> api.public.compute.UpdateSatelliteRequest
	12, // 22: api.public.compute.Compute.DeleteSatellite:input_type -> api.public.compute.DeleteSatelliteRequest
	14, // 23: api.public.compute.Compute.GetSatellite:input_type -> api.public.compute.GetSatelliteRequest
	23, // 24: api.public.compute.Compute.RegisterSatellite:input_type -> api.public.compute.RegisterSatelliteRequest
	25, // 25: api.public.compute.Compute.DeregisterSatellite:input_type -> api.public.compute.DeregisterSatelliteRequest
	27, // 26: api.public.compute.Compute.SatelliteHeartbeat:input_type -> api.public.compute.SatelliteHeartbeatRequest
	16, // 27: api.public.compute.Compute.WakeSatellite:input_type -> api.public.compute.WakeSatelliteRequest
	18, // 28: api.public.compute.Compute.SleepSatellite:input_type -> api.public.compute.SleepSatelliteRequest
	20, // 29: api.public.compute.Compute.ReserveSatellite:input_type -> api.public.compute.ReserveSatelliteRequest
	2,  // 30: api.public.compute.Compute.SetGithubToken:input_type -> api.public.compute.SetGithubTokenRequest
	1,  // 31: api.public.compute.Compute.GetGithubJob:input_type -> api.public.compute.GetGithubJobRequest
	6,  // 32: api.public.compute.Compute.LaunchSatellite:output_type -> api.public.compute.LaunchSatelliteResponse
	8,  // 33: api.public.compute.Compute.ListSatellites:output_type -> api.public.compute.ListSatellitesResponse
	11, // 34: api.public.compute.Compute.UpdateSatellite:output_type -> api.public.compute.UpdateSatelliteResponse
	13, // 35: api.public.compute.Compute.DeleteSatellite:output_type -> api.public.compute.DeleteSatelliteResponse
	15, // 36: api.public.compute.Compute.GetSatellite:output_type -> api.public.compute.GetSatelliteResponse
	24, // 37: api.public.compute.Compute.RegisterSatellite:output_type -> api.public.compute.RegisterSatelliteResponse
	26, // 38: api.public.compute.Compute.DeregisterSatellite:output_type -> api.public.compute.DeregisterSatelliteResponse
	28, // 39: api.public.compute.Compute.SatelliteHeartbeat:output_type -> api.public.compute.SatelliteHeartbeatResponse
	17, // 40: api.public.compute.Compute.WakeSatellite:output_type -> api.public.compute.WakeSatelliteResponse
	19, // 41: api.public.compute.Compute.SleepSatellite:output_type -> api.public.compute.SleepSatelliteResponse
	21, // 42: api.public.compute.Compute.ReserveSatellite:output_type -> api.public.compute.ReserveSatelliteResponse
	3,  // 43: api.public.compute.Compute.SetGithubToken:output_type -> api.public.compute.SetGithubTokenResponse
	4,  // 44: api.public.compute.Compute.GetGithubJob:output_type -> api.public.compute.GetGithubJobResponse
	32, // [32:45] is the sub-list for method output_type
	19, // [19:32] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_compute_proto_init() }
func file_compute_proto_init() {
	if File_compute_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_compute_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGithubJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGithubTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGithubTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGithubJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchSatelliteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchSatelliteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSatellitesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSatellitesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SatelliteSpecs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSatelliteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSatelliteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSatelliteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSatelliteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSatelliteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSatelliteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WakeSatelliteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WakeSatelliteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SleepSatelliteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SleepSatelliteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveSatelliteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveSatelliteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterSatelliteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterSatelliteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeregisterSatelliteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeregisterSatelliteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SatelliteHeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SatelliteHeartbeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGithubJobResponse_Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSatellitesResponse_SatelliteInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveSatelliteRequest_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_compute_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_compute_proto_goTypes,
		DependencyIndexes: file_compute_proto_depIdxs,
		EnumInfos:         file_compute_proto_enumTypes,
		MessageInfos:      file_compute_proto_msgTypes,
	}.Build()
	File_compute_proto = out.File
	file_compute_proto_rawDesc = nil
	file_compute_proto_goTypes = nil
	file_compute_proto_depIdxs = nil
}
