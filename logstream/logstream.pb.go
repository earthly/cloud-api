// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: logstream.proto

package logstream

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PassDeltaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId   string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	BuildId string `protobuf:"bytes,2,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	// project_id is the ID of the CI Project containing the build.
	// It can be left empty for builds that are not run on the CI.
	ProjectId      string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Delta          *Delta `protobuf:"bytes,4,opt,name=delta,proto3" json:"delta,omitempty"`
	TestRetryError bool   `protobuf:"varint,5,opt,name=test_retry_error,json=testRetryError,proto3" json:"test_retry_error,omitempty"`
	Flush          bool   `protobuf:"varint,6,opt,name=flush,proto3" json:"flush,omitempty"`
}

func (x *PassDeltaRequest) Reset() {
	*x = PassDeltaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logstream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassDeltaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassDeltaRequest) ProtoMessage() {}

func (x *PassDeltaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logstream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassDeltaRequest.ProtoReflect.Descriptor instead.
func (*PassDeltaRequest) Descriptor() ([]byte, []int) {
	return file_logstream_proto_rawDescGZIP(), []int{0}
}

func (x *PassDeltaRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *PassDeltaRequest) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *PassDeltaRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PassDeltaRequest) GetDelta() *Delta {
	if x != nil {
		return x.Delta
	}
	return nil
}

func (x *PassDeltaRequest) GetTestRetryError() bool {
	if x != nil {
		return x.TestRetryError
	}
	return false
}

func (x *PassDeltaRequest) GetFlush() bool {
	if x != nil {
		return x.Flush
	}
	return false
}

type PassDeltaReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PassDeltaReplyOneof:
	//	*PassDeltaReply_AssignBuildId
	//	*PassDeltaReply_Repeat
	//	*PassDeltaReply_Ack
	//	*PassDeltaReply_EofConfirm
	//	*PassDeltaReply_FlushConfirm
	PassDeltaReplyOneof isPassDeltaReply_PassDeltaReplyOneof `protobuf_oneof:"pass_delta_reply_oneof"`
}

func (x *PassDeltaReply) Reset() {
	*x = PassDeltaReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logstream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassDeltaReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassDeltaReply) ProtoMessage() {}

func (x *PassDeltaReply) ProtoReflect() protoreflect.Message {
	mi := &file_logstream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassDeltaReply.ProtoReflect.Descriptor instead.
func (*PassDeltaReply) Descriptor() ([]byte, []int) {
	return file_logstream_proto_rawDescGZIP(), []int{1}
}

func (m *PassDeltaReply) GetPassDeltaReplyOneof() isPassDeltaReply_PassDeltaReplyOneof {
	if m != nil {
		return m.PassDeltaReplyOneof
	}
	return nil
}

func (x *PassDeltaReply) GetAssignBuildId() string {
	if x, ok := x.GetPassDeltaReplyOneof().(*PassDeltaReply_AssignBuildId); ok {
		return x.AssignBuildId
	}
	return ""
}

func (x *PassDeltaReply) GetRepeat() *PassDeltaReply_Indices {
	if x, ok := x.GetPassDeltaReplyOneof().(*PassDeltaReply_Repeat); ok {
		return x.Repeat
	}
	return nil
}

func (x *PassDeltaReply) GetAck() *PassDeltaReply_Indices {
	if x, ok := x.GetPassDeltaReplyOneof().(*PassDeltaReply_Ack); ok {
		return x.Ack
	}
	return nil
}

func (x *PassDeltaReply) GetEofConfirm() bool {
	if x, ok := x.GetPassDeltaReplyOneof().(*PassDeltaReply_EofConfirm); ok {
		return x.EofConfirm
	}
	return false
}

func (x *PassDeltaReply) GetFlushConfirm() bool {
	if x, ok := x.GetPassDeltaReplyOneof().(*PassDeltaReply_FlushConfirm); ok {
		return x.FlushConfirm
	}
	return false
}

type isPassDeltaReply_PassDeltaReplyOneof interface {
	isPassDeltaReply_PassDeltaReplyOneof()
}

type PassDeltaReply_AssignBuildId struct {
	AssignBuildId string `protobuf:"bytes,1,opt,name=assign_build_id,json=assignBuildId,proto3,oneof"`
}

type PassDeltaReply_Repeat struct {
	Repeat *PassDeltaReply_Indices `protobuf:"bytes,2,opt,name=repeat,proto3,oneof"`
}

type PassDeltaReply_Ack struct {
	Ack *PassDeltaReply_Indices `protobuf:"bytes,3,opt,name=ack,proto3,oneof"`
}

type PassDeltaReply_EofConfirm struct {
	// eof_confirm is sent after the last delta is received
	// after the eofConfirm message, the client closes the stream
	// (repeats will not be served from this point).
	EofConfirm bool `protobuf:"varint,4,opt,name=eof_confirm,json=eofConfirm,proto3,oneof"`
}

type PassDeltaReply_FlushConfirm struct {
	FlushConfirm bool `protobuf:"varint,5,opt,name=flush_confirm,json=flushConfirm,proto3,oneof"`
}

func (*PassDeltaReply_AssignBuildId) isPassDeltaReply_PassDeltaReplyOneof() {}

func (*PassDeltaReply_Repeat) isPassDeltaReply_PassDeltaReplyOneof() {}

func (*PassDeltaReply_Ack) isPassDeltaReply_PassDeltaReplyOneof() {}

func (*PassDeltaReply_EofConfirm) isPassDeltaReply_PassDeltaReplyOneof() {}

func (*PassDeltaReply_FlushConfirm) isPassDeltaReply_PassDeltaReplyOneof() {}

type SnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId   string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	BuildId string `protobuf:"bytes,2,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	// project_id is the ID of the CI Project containing the build.
	// It can be left empty for builds that are not run on the CI.
	ProjectId string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *SnapshotRequest) Reset() {
	*x = SnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logstream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotRequest) ProtoMessage() {}

func (x *SnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logstream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotRequest.ProtoReflect.Descriptor instead.
func (*SnapshotRequest) Descriptor() ([]byte, []int) {
	return file_logstream_proto_rawDescGZIP(), []int{2}
}

func (x *SnapshotRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *SnapshotRequest) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *SnapshotRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type SnapshotReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildId  string         `protobuf:"bytes,1,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	Manifest *BuildManifest `protobuf:"bytes,2,opt,name=manifest,proto3" json:"manifest,omitempty"`
}

func (x *SnapshotReply) Reset() {
	*x = SnapshotReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logstream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotReply) ProtoMessage() {}

func (x *SnapshotReply) ProtoReflect() protoreflect.Message {
	mi := &file_logstream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotReply.ProtoReflect.Descriptor instead.
func (*SnapshotReply) Descriptor() ([]byte, []int) {
	return file_logstream_proto_rawDescGZIP(), []int{3}
}

func (x *SnapshotReply) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *SnapshotReply) GetManifest() *BuildManifest {
	if x != nil {
		return x.Manifest
	}
	return nil
}

type GetManifestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId   string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	BuildId string `protobuf:"bytes,2,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	// snapshot_id is the ID of the snapshot to get the manifest for.
	// If not provided, the latest snapshot will be used.
	SnapshotId string `protobuf:"bytes,3,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
}

func (x *GetManifestRequest) Reset() {
	*x = GetManifestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logstream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetManifestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetManifestRequest) ProtoMessage() {}

func (x *GetManifestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logstream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetManifestRequest.ProtoReflect.Descriptor instead.
func (*GetManifestRequest) Descriptor() ([]byte, []int) {
	return file_logstream_proto_rawDescGZIP(), []int{4}
}

func (x *GetManifestRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetManifestRequest) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *GetManifestRequest) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

type GetManifestReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manifest *BuildManifest `protobuf:"bytes,1,opt,name=manifest,proto3" json:"manifest,omitempty"`
}

func (x *GetManifestReply) Reset() {
	*x = GetManifestReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logstream_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetManifestReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetManifestReply) ProtoMessage() {}

func (x *GetManifestReply) ProtoReflect() protoreflect.Message {
	mi := &file_logstream_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetManifestReply.ProtoReflect.Descriptor instead.
func (*GetManifestReply) Descriptor() ([]byte, []int) {
	return file_logstream_proto_rawDescGZIP(), []int{5}
}

func (x *GetManifestReply) GetManifest() *BuildManifest {
	if x != nil {
		return x.Manifest
	}
	return nil
}

type GetLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId      string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	BuildId    string `protobuf:"bytes,2,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	SnapshotId string `protobuf:"bytes,3,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	TargetId   string `protobuf:"bytes,4,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	// start_seek_index is the index to start reading from.
	// If negative, the server will return data starting from the last N bytes,
	// where N = len + start_seek_index.
	StartSeekIndex int64 `protobuf:"varint,5,opt,name=start_seek_index,json=startSeekIndex,proto3" json:"start_seek_index,omitempty"`
	// end_seek_index is the end index to read up to.
	// If negative, the server will return data starting up to the last N bytes,
	// where N = len + end_seek_index.
	// If zero, the server will return data starting up to the end of the log.
	EndSeekIndex int64 `protobuf:"varint,6,opt,name=end_seek_index,json=endSeekIndex,proto3" json:"end_seek_index,omitempty"`
}

func (x *GetLogRequest) Reset() {
	*x = GetLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logstream_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogRequest) ProtoMessage() {}

func (x *GetLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logstream_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogRequest.ProtoReflect.Descriptor instead.
func (*GetLogRequest) Descriptor() ([]byte, []int) {
	return file_logstream_proto_rawDescGZIP(), []int{6}
}

func (x *GetLogRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetLogRequest) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *GetLogRequest) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

func (x *GetLogRequest) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *GetLogRequest) GetStartSeekIndex() int64 {
	if x != nil {
		return x.StartSeekIndex
	}
	return 0
}

func (x *GetLogRequest) GetEndSeekIndex() int64 {
	if x != nil {
		return x.EndSeekIndex
	}
	return 0
}

type GetLogReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data           []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	StartSeekIndex int64  `protobuf:"varint,2,opt,name=start_seek_index,json=startSeekIndex,proto3" json:"start_seek_index,omitempty"`
	EndSeekIndex   int64  `protobuf:"varint,3,opt,name=end_seek_index,json=endSeekIndex,proto3" json:"end_seek_index,omitempty"`
}

func (x *GetLogReply) Reset() {
	*x = GetLogReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logstream_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogReply) ProtoMessage() {}

func (x *GetLogReply) ProtoReflect() protoreflect.Message {
	mi := &file_logstream_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogReply.ProtoReflect.Descriptor instead.
func (*GetLogReply) Descriptor() ([]byte, []int) {
	return file_logstream_proto_rawDescGZIP(), []int{7}
}

func (x *GetLogReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetLogReply) GetStartSeekIndex() int64 {
	if x != nil {
		return x.StartSeekIndex
	}
	return 0
}

func (x *GetLogReply) GetEndSeekIndex() int64 {
	if x != nil {
		return x.EndSeekIndex
	}
	return 0
}

type SubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId               string           `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	BuildId             string           `protobuf:"bytes,2,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	IncludeManifest     bool             `protobuf:"varint,3,opt,name=include_manifest,json=includeManifest,proto3" json:"include_manifest,omitempty"`
	NextManifestOrderId int64            `protobuf:"varint,4,opt,name=next_manifest_order_id,json=nextManifestOrderId,proto3" json:"next_manifest_order_id,omitempty"`
	IncludeNewTargets   bool             `protobuf:"varint,5,opt,name=include_new_targets,json=includeNewTargets,proto3" json:"include_new_targets,omitempty"`
	TargetSeekIndices   map[string]int64 `protobuf:"bytes,6,rep,name=target_seek_indices,json=targetSeekIndices,proto3" json:"target_seek_indices,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logstream_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logstream_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_logstream_proto_rawDescGZIP(), []int{8}
}

func (x *SubscribeRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *SubscribeRequest) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *SubscribeRequest) GetIncludeManifest() bool {
	if x != nil {
		return x.IncludeManifest
	}
	return false
}

func (x *SubscribeRequest) GetNextManifestOrderId() int64 {
	if x != nil {
		return x.NextManifestOrderId
	}
	return 0
}

func (x *SubscribeRequest) GetIncludeNewTargets() bool {
	if x != nil {
		return x.IncludeNewTargets
	}
	return false
}

func (x *SubscribeRequest) GetTargetSeekIndices() map[string]int64 {
	if x != nil {
		return x.TargetSeekIndices
	}
	return nil
}

type SubscribeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delta *Delta `protobuf:"bytes,1,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *SubscribeReply) Reset() {
	*x = SubscribeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logstream_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeReply) ProtoMessage() {}

func (x *SubscribeReply) ProtoReflect() protoreflect.Message {
	mi := &file_logstream_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeReply.ProtoReflect.Descriptor instead.
func (*SubscribeReply) Descriptor() ([]byte, []int) {
	return file_logstream_proto_rawDescGZIP(), []int{9}
}

func (x *SubscribeReply) GetDelta() *Delta {
	if x != nil {
		return x.Delta
	}
	return nil
}

type ReadLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId    string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	BuildId  string `protobuf:"bytes,2,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	TargetId string `protobuf:"bytes,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	// start_seek_index is the index to start reading from.
	// If negative, the server will return data starting from the last N bytes,
	// where N = len + start_seek_index.
	StartSeekIndex int64 `protobuf:"varint,4,opt,name=start_seek_index,json=startSeekIndex,proto3" json:"start_seek_index,omitempty"`
	// end_seek_index is the end index to read up to.
	// If negative, the server will return data starting up to the last N bytes,
	// where N = len + end_seek_index.
	// If zero, the server will return data starting up to the end of the log.
	EndSeekIndex int64 `protobuf:"varint,5,opt,name=end_seek_index,json=endSeekIndex,proto3" json:"end_seek_index,omitempty"`
	// follow should be set if the reply should include ongoing updates.
	// This is similar to "tail -f".
	Follow bool `protobuf:"varint,6,opt,name=follow,proto3" json:"follow,omitempty"`
}

func (x *ReadLogRequest) Reset() {
	*x = ReadLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logstream_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadLogRequest) ProtoMessage() {}

func (x *ReadLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logstream_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadLogRequest.ProtoReflect.Descriptor instead.
func (*ReadLogRequest) Descriptor() ([]byte, []int) {
	return file_logstream_proto_rawDescGZIP(), []int{10}
}

func (x *ReadLogRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ReadLogRequest) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *ReadLogRequest) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *ReadLogRequest) GetStartSeekIndex() int64 {
	if x != nil {
		return x.StartSeekIndex
	}
	return 0
}

func (x *ReadLogRequest) GetEndSeekIndex() int64 {
	if x != nil {
		return x.EndSeekIndex
	}
	return 0
}

func (x *ReadLogRequest) GetFollow() bool {
	if x != nil {
		return x.Follow
	}
	return false
}

type ReadLogReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data           []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	StartSeekIndex int64  `protobuf:"varint,2,opt,name=start_seek_index,json=startSeekIndex,proto3" json:"start_seek_index,omitempty"`
	EndSeekIndex   int64  `protobuf:"varint,3,opt,name=end_seek_index,json=endSeekIndex,proto3" json:"end_seek_index,omitempty"`
	Eof            bool   `protobuf:"varint,4,opt,name=eof,proto3" json:"eof,omitempty"`
}

func (x *ReadLogReply) Reset() {
	*x = ReadLogReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logstream_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadLogReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadLogReply) ProtoMessage() {}

func (x *ReadLogReply) ProtoReflect() protoreflect.Message {
	mi := &file_logstream_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadLogReply.ProtoReflect.Descriptor instead.
func (*ReadLogReply) Descriptor() ([]byte, []int) {
	return file_logstream_proto_rawDescGZIP(), []int{11}
}

func (x *ReadLogReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReadLogReply) GetStartSeekIndex() int64 {
	if x != nil {
		return x.StartSeekIndex
	}
	return 0
}

func (x *ReadLogReply) GetEndSeekIndex() int64 {
	if x != nil {
		return x.EndSeekIndex
	}
	return 0
}

func (x *ReadLogReply) GetEof() bool {
	if x != nil {
		return x.Eof
	}
	return false
}

type PassDeltaReply_Indices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManifestOrderId int64            `protobuf:"varint,1,opt,name=manifest_order_id,json=manifestOrderId,proto3" json:"manifest_order_id,omitempty"`
	LogSeekIndices  map[string]int64 `protobuf:"bytes,2,rep,name=log_seek_indices,json=logSeekIndices,proto3" json:"log_seek_indices,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PassDeltaReply_Indices) Reset() {
	*x = PassDeltaReply_Indices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logstream_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassDeltaReply_Indices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassDeltaReply_Indices) ProtoMessage() {}

func (x *PassDeltaReply_Indices) ProtoReflect() protoreflect.Message {
	mi := &file_logstream_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassDeltaReply_Indices.ProtoReflect.Descriptor instead.
func (*PassDeltaReply_Indices) Descriptor() ([]byte, []int) {
	return file_logstream_proto_rawDescGZIP(), []int{1, 0}
}

func (x *PassDeltaReply_Indices) GetManifestOrderId() int64 {
	if x != nil {
		return x.ManifestOrderId
	}
	return 0
}

func (x *PassDeltaReply_Indices) GetLogSeekIndices() map[string]int64 {
	if x != nil {
		return x.LogSeekIndices
	}
	return nil
}

var File_logstream_proto protoreflect.FileDescriptor

var file_logstream_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x14, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f,
	0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x0e, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x73, 0x73, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x28, 0x0a,
	0x10, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x75, 0x73, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x22, 0x8f, 0x04,
	0x0a, 0x0e, 0x50, 0x61, 0x73, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x28, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x06, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x12, 0x40, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x03, 0x61, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0b, 0x65, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6f, 0x66,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x25, 0x0a, 0x0d, 0x66, 0x6c, 0x75, 0x73, 0x68,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x0c, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x1a, 0xe4,
	0x01, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x65,
	0x65, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f,
	0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c,
	0x6f, 0x67, 0x53, 0x65, 0x65, 0x6b, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x65, 0x6b, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x65, 0x6b, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22,
	0x62, 0x0a, 0x0f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x0d, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x3f, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c,
	0x6f, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x22, 0x67, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a,
	0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x22, 0xcf,
	0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x65, 0x65, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e,
	0x64, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x71, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x65,
	0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x65, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a,
	0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x89, 0x03, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x4e, 0x65, 0x77, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x6d, 0x0a, 0x13, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x65, 0x6b, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65,
	0x65, 0x6b, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x44, 0x0a, 0x16, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x65, 0x65, 0x6b, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x43, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x31, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f,
	0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x05, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x22, 0xc7, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x73, 0x65, 0x65, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x65, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x65,
	0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x22, 0x84,
	0x01, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x65,
	0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x65, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a,
	0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x6b, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x65, 0x6f, 0x66, 0x32, 0xc5, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x5f, 0x0a, 0x09, 0x50, 0x61, 0x73, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12,
	0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x58, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0xfe, 0x02,
	0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x12,
	0x61, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x52, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x23, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c,
	0x6f, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x57, 0x0a, 0x07, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x6f, 0x67,
	0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f,
	0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x42, 0x0d,
	0x5a, 0x0b, 0x2e, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_logstream_proto_rawDescOnce sync.Once
	file_logstream_proto_rawDescData = file_logstream_proto_rawDesc
)

func file_logstream_proto_rawDescGZIP() []byte {
	file_logstream_proto_rawDescOnce.Do(func() {
		file_logstream_proto_rawDescData = protoimpl.X.CompressGZIP(file_logstream_proto_rawDescData)
	})
	return file_logstream_proto_rawDescData
}

var file_logstream_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_logstream_proto_goTypes = []interface{}{
	(*PassDeltaRequest)(nil),       // 0: api.public.logstream.PassDeltaRequest
	(*PassDeltaReply)(nil),         // 1: api.public.logstream.PassDeltaReply
	(*SnapshotRequest)(nil),        // 2: api.public.logstream.SnapshotRequest
	(*SnapshotReply)(nil),          // 3: api.public.logstream.SnapshotReply
	(*GetManifestRequest)(nil),     // 4: api.public.logstream.GetManifestRequest
	(*GetManifestReply)(nil),       // 5: api.public.logstream.GetManifestReply
	(*GetLogRequest)(nil),          // 6: api.public.logstream.GetLogRequest
	(*GetLogReply)(nil),            // 7: api.public.logstream.GetLogReply
	(*SubscribeRequest)(nil),       // 8: api.public.logstream.SubscribeRequest
	(*SubscribeReply)(nil),         // 9: api.public.logstream.SubscribeReply
	(*ReadLogRequest)(nil),         // 10: api.public.logstream.ReadLogRequest
	(*ReadLogReply)(nil),           // 11: api.public.logstream.ReadLogReply
	(*PassDeltaReply_Indices)(nil), // 12: api.public.logstream.PassDeltaReply.Indices
	nil,                            // 13: api.public.logstream.PassDeltaReply.Indices.LogSeekIndicesEntry
	nil,                            // 14: api.public.logstream.SubscribeRequest.TargetSeekIndicesEntry
	(*Delta)(nil),                  // 15: api.public.logstream.Delta
	(*BuildManifest)(nil),          // 16: api.public.logstream.BuildManifest
}
var file_logstream_proto_depIdxs = []int32{
	15, // 0: api.public.logstream.PassDeltaRequest.delta:type_name -> api.public.logstream.Delta
	12, // 1: api.public.logstream.PassDeltaReply.repeat:type_name -> api.public.logstream.PassDeltaReply.Indices
	12, // 2: api.public.logstream.PassDeltaReply.ack:type_name -> api.public.logstream.PassDeltaReply.Indices
	16, // 3: api.public.logstream.SnapshotReply.manifest:type_name -> api.public.logstream.BuildManifest
	16, // 4: api.public.logstream.GetManifestReply.manifest:type_name -> api.public.logstream.BuildManifest
	14, // 5: api.public.logstream.SubscribeRequest.target_seek_indices:type_name -> api.public.logstream.SubscribeRequest.TargetSeekIndicesEntry
	15, // 6: api.public.logstream.SubscribeReply.delta:type_name -> api.public.logstream.Delta
	13, // 7: api.public.logstream.PassDeltaReply.Indices.log_seek_indices:type_name -> api.public.logstream.PassDeltaReply.Indices.LogSeekIndicesEntry
	0,  // 8: api.public.logstream.Ingester.PassDelta:input_type -> api.public.logstream.PassDeltaRequest
	2,  // 9: api.public.logstream.Ingester.Snapshot:input_type -> api.public.logstream.SnapshotRequest
	4,  // 10: api.public.logstream.LogStreamRead.GetManifest:input_type -> api.public.logstream.GetManifestRequest
	6,  // 11: api.public.logstream.LogStreamRead.GetLog:input_type -> api.public.logstream.GetLogRequest
	8,  // 12: api.public.logstream.LogStreamRead.Subscribe:input_type -> api.public.logstream.SubscribeRequest
	10, // 13: api.public.logstream.LogStreamRead.ReadLog:input_type -> api.public.logstream.ReadLogRequest
	1,  // 14: api.public.logstream.Ingester.PassDelta:output_type -> api.public.logstream.PassDeltaReply
	3,  // 15: api.public.logstream.Ingester.Snapshot:output_type -> api.public.logstream.SnapshotReply
	5,  // 16: api.public.logstream.LogStreamRead.GetManifest:output_type -> api.public.logstream.GetManifestReply
	7,  // 17: api.public.logstream.LogStreamRead.GetLog:output_type -> api.public.logstream.GetLogReply
	9,  // 18: api.public.logstream.LogStreamRead.Subscribe:output_type -> api.public.logstream.SubscribeReply
	11, // 19: api.public.logstream.LogStreamRead.ReadLog:output_type -> api.public.logstream.ReadLogReply
	14, // [14:20] is the sub-list for method output_type
	8,  // [8:14] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_logstream_proto_init() }
func file_logstream_proto_init() {
	if File_logstream_proto != nil {
		return
	}
	file_manifest_proto_init()
	file_delta_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_logstream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassDeltaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logstream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassDeltaReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logstream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logstream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logstream_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetManifestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logstream_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetManifestReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logstream_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logstream_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logstream_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logstream_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logstream_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logstream_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadLogReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logstream_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassDeltaReply_Indices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_logstream_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*PassDeltaReply_AssignBuildId)(nil),
		(*PassDeltaReply_Repeat)(nil),
		(*PassDeltaReply_Ack)(nil),
		(*PassDeltaReply_EofConfirm)(nil),
		(*PassDeltaReply_FlushConfirm)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_logstream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_logstream_proto_goTypes,
		DependencyIndexes: file_logstream_proto_depIdxs,
		MessageInfos:      file_logstream_proto_msgTypes,
	}.Build()
	File_logstream_proto = out.File
	file_logstream_proto_rawDesc = nil
	file_logstream_proto_goTypes = nil
	file_logstream_proto_depIdxs = nil
}
