// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: logstream.proto

package logstream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LogStream_StreamLogs_FullMethodName           = "/api.public.logstream.LogStream/StreamLogs"
	LogStream_GetLogs_FullMethodName              = "/api.public.logstream.LogStream/GetLogs"
	LogStream_InitLogs_FullMethodName             = "/api.public.logstream.LogStream/InitLogs"
	LogStream_GetFirebaseAuthToken_FullMethodName = "/api.public.logstream.LogStream/GetFirebaseAuthToken"
	LogStream_LongTermExists_FullMethodName       = "/api.public.logstream.LogStream/LongTermExists"
	LogStream_GetLongTerm_FullMethodName          = "/api.public.logstream.LogStream/GetLongTerm"
)

// LogStreamClient is the client API for LogStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogStreamClient interface {
	// StreamLogs streams logs to the server. Stream protocol:
	// 1. The client opens the channel.
	// 2. The client sends a ResetFields delta.
	// 3. Client continues streaming through the rest of the deltas.
	// 4. The final stream message from the client is an eof=true message.
	// 5. Server responds with eof_ack=true.
	// 6. Client closes the channel. (optionally, the client can wait for server_exit_status)
	StreamLogs(ctx context.Context, opts ...grpc.CallOption) (LogStream_StreamLogsClient, error)
	GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error)
	// InitLogs can be used to set the status of a build before or after the core
	// build task is run by the CLI. It's primarily meant to be used by the
	// initialization process, but can also be used to surface errors that may not
	// be handled well by the CLI.
	InitLogs(ctx context.Context, in *InitLogsRequest, opts ...grpc.CallOption) (*InitLogsResponse, error)
	// GetFirebaseAuthToken returns a token suitable for use with Firebase APIs
	// The user must already be authenticated.
	GetFirebaseAuthToken(ctx context.Context, in *GetFirebaseAuthTokenRequest, opts ...grpc.CallOption) (*GetFirebaseAuthTokenResponse, error)
	LongTermExists(ctx context.Context, in *LongTermExistsRequest, opts ...grpc.CallOption) (*LongTermExistsResponse, error)
	GetLongTerm(ctx context.Context, in *GetLongTermRequest, opts ...grpc.CallOption) (*GetLongTermResponse, error)
}

type logStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewLogStreamClient(cc grpc.ClientConnInterface) LogStreamClient {
	return &logStreamClient{cc}
}

func (c *logStreamClient) StreamLogs(ctx context.Context, opts ...grpc.CallOption) (LogStream_StreamLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogStream_ServiceDesc.Streams[0], LogStream_StreamLogs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &logStreamStreamLogsClient{stream}
	return x, nil
}

type LogStream_StreamLogsClient interface {
	Send(*StreamLogRequest) error
	Recv() (*StreamLogResponse, error)
	grpc.ClientStream
}

type logStreamStreamLogsClient struct {
	grpc.ClientStream
}

func (x *logStreamStreamLogsClient) Send(m *StreamLogRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logStreamStreamLogsClient) Recv() (*StreamLogResponse, error) {
	m := new(StreamLogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logStreamClient) GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error) {
	out := new(GetLogsResponse)
	err := c.cc.Invoke(ctx, LogStream_GetLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logStreamClient) InitLogs(ctx context.Context, in *InitLogsRequest, opts ...grpc.CallOption) (*InitLogsResponse, error) {
	out := new(InitLogsResponse)
	err := c.cc.Invoke(ctx, LogStream_InitLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logStreamClient) GetFirebaseAuthToken(ctx context.Context, in *GetFirebaseAuthTokenRequest, opts ...grpc.CallOption) (*GetFirebaseAuthTokenResponse, error) {
	out := new(GetFirebaseAuthTokenResponse)
	err := c.cc.Invoke(ctx, LogStream_GetFirebaseAuthToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logStreamClient) LongTermExists(ctx context.Context, in *LongTermExistsRequest, opts ...grpc.CallOption) (*LongTermExistsResponse, error) {
	out := new(LongTermExistsResponse)
	err := c.cc.Invoke(ctx, LogStream_LongTermExists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logStreamClient) GetLongTerm(ctx context.Context, in *GetLongTermRequest, opts ...grpc.CallOption) (*GetLongTermResponse, error) {
	out := new(GetLongTermResponse)
	err := c.cc.Invoke(ctx, LogStream_GetLongTerm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogStreamServer is the server API for LogStream service.
// All implementations must embed UnimplementedLogStreamServer
// for forward compatibility
type LogStreamServer interface {
	// StreamLogs streams logs to the server. Stream protocol:
	// 1. The client opens the channel.
	// 2. The client sends a ResetFields delta.
	// 3. Client continues streaming through the rest of the deltas.
	// 4. The final stream message from the client is an eof=true message.
	// 5. Server responds with eof_ack=true.
	// 6. Client closes the channel. (optionally, the client can wait for server_exit_status)
	StreamLogs(LogStream_StreamLogsServer) error
	GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error)
	// InitLogs can be used to set the status of a build before or after the core
	// build task is run by the CLI. It's primarily meant to be used by the
	// initialization process, but can also be used to surface errors that may not
	// be handled well by the CLI.
	InitLogs(context.Context, *InitLogsRequest) (*InitLogsResponse, error)
	// GetFirebaseAuthToken returns a token suitable for use with Firebase APIs
	// The user must already be authenticated.
	GetFirebaseAuthToken(context.Context, *GetFirebaseAuthTokenRequest) (*GetFirebaseAuthTokenResponse, error)
	LongTermExists(context.Context, *LongTermExistsRequest) (*LongTermExistsResponse, error)
	GetLongTerm(context.Context, *GetLongTermRequest) (*GetLongTermResponse, error)
	mustEmbedUnimplementedLogStreamServer()
}

// UnimplementedLogStreamServer must be embedded to have forward compatible implementations.
type UnimplementedLogStreamServer struct {
}

func (UnimplementedLogStreamServer) StreamLogs(LogStream_StreamLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogs not implemented")
}
func (UnimplementedLogStreamServer) GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedLogStreamServer) InitLogs(context.Context, *InitLogsRequest) (*InitLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitLogs not implemented")
}
func (UnimplementedLogStreamServer) GetFirebaseAuthToken(context.Context, *GetFirebaseAuthTokenRequest) (*GetFirebaseAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFirebaseAuthToken not implemented")
}
func (UnimplementedLogStreamServer) LongTermExists(context.Context, *LongTermExistsRequest) (*LongTermExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LongTermExists not implemented")
}
func (UnimplementedLogStreamServer) GetLongTerm(context.Context, *GetLongTermRequest) (*GetLongTermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLongTerm not implemented")
}
func (UnimplementedLogStreamServer) mustEmbedUnimplementedLogStreamServer() {}

// UnsafeLogStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogStreamServer will
// result in compilation errors.
type UnsafeLogStreamServer interface {
	mustEmbedUnimplementedLogStreamServer()
}

func RegisterLogStreamServer(s grpc.ServiceRegistrar, srv LogStreamServer) {
	s.RegisterService(&LogStream_ServiceDesc, srv)
}

func _LogStream_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogStreamServer).StreamLogs(&logStreamStreamLogsServer{stream})
}

type LogStream_StreamLogsServer interface {
	Send(*StreamLogResponse) error
	Recv() (*StreamLogRequest, error)
	grpc.ServerStream
}

type logStreamStreamLogsServer struct {
	grpc.ServerStream
}

func (x *logStreamStreamLogsServer) Send(m *StreamLogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logStreamStreamLogsServer) Recv() (*StreamLogRequest, error) {
	m := new(StreamLogRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LogStream_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStreamServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogStream_GetLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStreamServer).GetLogs(ctx, req.(*GetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogStream_InitLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStreamServer).InitLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogStream_InitLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStreamServer).InitLogs(ctx, req.(*InitLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogStream_GetFirebaseAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFirebaseAuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStreamServer).GetFirebaseAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogStream_GetFirebaseAuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStreamServer).GetFirebaseAuthToken(ctx, req.(*GetFirebaseAuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogStream_LongTermExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LongTermExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStreamServer).LongTermExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogStream_LongTermExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStreamServer).LongTermExists(ctx, req.(*LongTermExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogStream_GetLongTerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLongTermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStreamServer).GetLongTerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogStream_GetLongTerm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStreamServer).GetLongTerm(ctx, req.(*GetLongTermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogStream_ServiceDesc is the grpc.ServiceDesc for LogStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.public.logstream.LogStream",
	HandlerType: (*LogStreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLogs",
			Handler:    _LogStream_GetLogs_Handler,
		},
		{
			MethodName: "InitLogs",
			Handler:    _LogStream_InitLogs_Handler,
		},
		{
			MethodName: "GetFirebaseAuthToken",
			Handler:    _LogStream_GetFirebaseAuthToken_Handler,
		},
		{
			MethodName: "LongTermExists",
			Handler:    _LogStream_LongTermExists_Handler,
		},
		{
			MethodName: "GetLongTerm",
			Handler:    _LogStream_GetLongTerm_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLogs",
			Handler:       _LogStream_StreamLogs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "logstream.proto",
}
